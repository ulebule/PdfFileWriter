<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PdfFileWriter</name>
    </assembly>
    <members>
        <member name="T:PdfFileWriter.EncodingControl">
            <summary>
            PDF417 Encoding control
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncodingControl.Auto">
            <summary>
            Auto encoding control
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncodingControl.ByteOnly">
            <summary>
            Encode all as bytes
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncodingControl.TextAndByte">
            <summary>
            Encode all as text and bytes
            </summary>
        </member>
        <member name="T:PdfFileWriter.ErrorCorrectionLevel">
            <summary>
            PDF417 Error correction level
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrectionLevel.Level_0">
            <summary>
            Error correction level 0 (2 correction codewords)
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrectionLevel.Level_1">
            <summary>
            Error correction level 1 (4 correction codewords)
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrectionLevel.Level_2">
            <summary>
            Error correction level 2 (8 correction codewords)
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrectionLevel.Level_3">
            <summary>
            Error correction level 3 (16 correction codewords)
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrectionLevel.Level_4">
            <summary>
            Error correction level 4 (32 correction codewords)
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrectionLevel.Level_5">
            <summary>
            Error correction level 5 (64 correction codewords)
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrectionLevel.Level_6">
            <summary>
            Error correction level 6 (128 correction codewords)
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrectionLevel.Level_7">
            <summary>
            Error correction level 7 (256 correction codewords)
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrectionLevel.Level_8">
            <summary>
            Error correction level 8 (512 correction codewords)
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrectionLevel.AutoLow">
            <summary>
            Recommended level less one
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrectionLevel.AutoNormal">
            <summary>
            Recomended level based on number of codewords
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrectionLevel.AutoMedium">
            <summary>
            Recommended level plus one
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrectionLevel.AutoHigh">
            <summary>
            Recommended level plus two
            </summary>
        </member>
        <member name="T:PdfFileWriter.Pdf417Encoder">
            <summary>
            PDF417 Encoder class
            </summary>
        </member>
        <member name="P:PdfFileWriter.Pdf417Encoder.DataRows">
            <summary>
            Data rows
            </summary>
        </member>
        <member name="P:PdfFileWriter.Pdf417Encoder.DataColumns">
            <summary>
            Data columns
            </summary>
        </member>
        <member name="P:PdfFileWriter.Pdf417Encoder.BarColumns">
            <summary>
            Returns the barcode width in terms of narrow bars
            </summary>
        </member>
        <member name="P:PdfFileWriter.Pdf417Encoder.ImageWidth">
            <summary>
            Barcode image width in pixels
            </summary>
        </member>
        <member name="P:PdfFileWriter.Pdf417Encoder.ImageHeight">
            <summary>
            Barcode image height in pixels
            </summary>
        </member>
        <member name="F:PdfFileWriter.Pdf417Encoder.Pdf417BarcodeMatrix">
            <summary>
            Barcode matrix (each bar is one bool item)
            </summary>
        </member>
        <member name="P:PdfFileWriter.Pdf417Encoder.EncodingControl">
            <summary>
            Encoding control (Default: Auto)
            </summary>
        </member>
        <member name="P:PdfFileWriter.Pdf417Encoder.ErrorCorrection">
            <summary>
            Error correction level (Default: AutoNormal)
            </summary>
        </member>
        <member name="P:PdfFileWriter.Pdf417Encoder.NarrowBarWidth">
            <summary>
            Narrow bar width in pixels (Default: 2)
            </summary>
        </member>
        <member name="P:PdfFileWriter.Pdf417Encoder.RowHeight">
            <summary>
            Row height in pixels (Default: 6)
            </summary>
        </member>
        <member name="P:PdfFileWriter.Pdf417Encoder.QuietZone">
            <summary>
            Quiet zone around the barcode in pixels (Default: 4)
            </summary>
        </member>
        <member name="P:PdfFileWriter.Pdf417Encoder.DefaultDataColumns">
            <summary>
            Default number of data columns (Default: 3)
            </summary>
        </member>
        <member name="P:PdfFileWriter.Pdf417Encoder.GlobalLabelIDCharacterSet">
            <summary>
            ISO character set ISO-8859-n (n=1 to 9, 13 and 15) (Default: null)
            </summary>
        </member>
        <member name="P:PdfFileWriter.Pdf417Encoder.GlobalLabelIDUserDefined">
            <summary>
            Global label ID user defined (Default: 0)
            </summary>
        </member>
        <member name="P:PdfFileWriter.Pdf417Encoder.GlobalLabelIDGeneralPurpose">
            <summary>
            Global label ID general purpose (Default: 0)
            </summary>
        </member>
        <member name="M:PdfFileWriter.Pdf417Encoder.Encode(System.String)">
            <summary>
            Encode unicode string
            </summary>
            <param name="StringData">Input text string</param>
        </member>
        <member name="M:PdfFileWriter.Pdf417Encoder.Encode(System.Byte[])">
            <summary>
            Encode binary bytes array
            </summary>
            <param name="BinaryData">Input binary byte array</param>
        </member>
        <member name="M:PdfFileWriter.Pdf417Encoder.WidthToHeightRatio(System.Double)">
            <summary>
            Adjust rows and columns to achive width to height ratio
            </summary>
            <param name="Ratio">Requested width to height ratio</param>
            <returns>Success or failure result</returns>
        </member>
        <member name="M:PdfFileWriter.Pdf417Encoder.SetDataColumns(System.Int32)">
            <summary>
            Set number of data columns and data rows 
            </summary>
            <param name="dataColumns">Data columns</param>
            <returns>Success or failure result</returns>
        </member>
        <member name="M:PdfFileWriter.Pdf417Encoder.SetDataRows(System.Int32)">
            <summary>
            Set number of data rows and data columns 
            </summary>
            <param name="dataRows">Data rowss</param>
            <returns>Success or failure result</returns>
        </member>
        <member name="M:PdfFileWriter.Pdf417Encoder.ConvertBarcodeMatrixToPixels">
            <summary>
            convert black and white matrix to black and white image
            </summary>
            <returns>Black and white image in pixels</returns>
        </member>
        <member name="M:PdfFileWriter.Pdf417Encoder.CreateBarcodeMatrix">
            <summary>
            Create black and white boolean matrix of the barcode image
            </summary>
            <returns>bool matrix [row, col] true=black, false=white</returns>
        </member>
        <member name="T:PdfFileWriter.Pdf417EncoderTables">
            <summary>
            Static tables for Pdf417Encoder
            </summary>
        </member>
        <member name="T:PdfFileWriter.NamedActionCode">
            <summary>
            Named action enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.NamedActionCode.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:PdfFileWriter.NamedActionCode.NextPage">
            <summary>
            Go to next page
            </summary>
        </member>
        <member name="F:PdfFileWriter.NamedActionCode.PrevPage">
            <summary>
            Go to previous page
            </summary>
        </member>
        <member name="F:PdfFileWriter.NamedActionCode.FirstPage">
            <summary>
            Go to first page
            </summary>
        </member>
        <member name="F:PdfFileWriter.NamedActionCode.LastPage">
            <summary>
            Go to last page
            </summary>
        </member>
        <member name="T:PdfFileWriter.CaptionPosStyle">
            <summary>
            Caption position style enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.CaptionPosStyle.NoIcon">
            <summary>
            No icon, caption only
            </summary>
        </member>
        <member name="F:PdfFileWriter.CaptionPosStyle.NoCaption">
            <summary>
            No caption, icon only
            </summary>
        </member>
        <member name="F:PdfFileWriter.CaptionPosStyle.CapBelowIcon">
            <summary>
            Caption below the icon
            </summary>
        </member>
        <member name="F:PdfFileWriter.CaptionPosStyle.CapAboveIcon">
            <summary>
            Caption above the icon
            </summary>
        </member>
        <member name="F:PdfFileWriter.CaptionPosStyle.CapRightOfIcon">
            <summary>
            Caption to the right of the icon
            </summary>
        </member>
        <member name="F:PdfFileWriter.CaptionPosStyle.CapLeftOfIcon">
            <summary>
            Caption to the left of the icon
            </summary>
        </member>
        <member name="F:PdfFileWriter.CaptionPosStyle.CapOverIcon">
            <summary>
            Caption overlaid directly on the icon
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfAcroButtonField">
            <summary>
            Acro button field 
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroButtonField.NamedAction">
            <summary>
            named action
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroButtonField.JavaScriptAction">
            <summary>
            Java script action
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroButtonField.Icon">
            <summary>
            Display icon
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAcroButtonField.#ctor(PdfFileWriter.PdfAcroForm,PdfFileWriter.PdfPage,System.String)">
            <summary>
            Acro field choice constructor
            </summary>
            <param name="AcroForm">Acro form parent</param>
            <param name="AcroPage">Current page</param>
            <param name="FieldName">Field partial name (/T)</param>
        </member>
        <member name="M:PdfFileWriter.PdfAcroButtonField.DrawButtonField(PdfFileWriter.AppearanceType)">
            <summary>
            Draw button field (add xobject to appearance dictionary /AP)
            </summary>
            <param name="Type">Appearance type enumeration: Normal, Rollover, Down</param>
        </member>
        <member name="M:PdfFileWriter.PdfAcroButtonField.CloseObject">
            <summary>
            close object before writing to PDF file
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfAcroCheckBoxField">
            <summary>
            Acro check box field
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroCheckBoxField.Check">
            <summary>
            field value (/V)
            if field value is false, it is set to /Off
            if field value is true, it is set to the on-state name
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAcroCheckBoxField.OnStateName">
            <summary>
            On-state name (the off-state is always "Off") 
            On-state is defined by the constructor
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAcroCheckBoxField.Font">
            <summary>
            ZapfDingbats font for checkbox
            It is acrobat's build-in type1 font
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAcroCheckBoxField.CheckMarkChar">
            <summary>
            Check-mark (ZapfDignbats) symbol code
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAcroCheckBoxField.CheckMarkColor">
            <summary>
            Checkmark font color
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAcroCheckBoxField.#ctor(PdfFileWriter.PdfAcroForm,PdfFileWriter.PdfPage,System.String,System.String)">
            <summary>
            Acro field button constructor
            </summary>
            <param name="AcroForm">Acro form (parent)</param>
            <param name="AcroPage">Current page</param>
            <param name="FieldName">Field name</param>
            <param name="OnStateName">Check box on value</param>
        </member>
        <member name="M:PdfFileWriter.PdfAcroCheckBoxField.DrawCheckBox(PdfFileWriter.AppearanceType,System.Boolean)">
            <summary>
            Draw checkbox (Appearance dictionary XObject)
            </summary>
            <param name="AppType">Normal (/N), Roll over (/R), Down (/D)</param>
            <param name="Selected">Off (false) or selected (true)</param>
        </member>
        <member name="M:PdfFileWriter.PdfAcroCheckBoxField.CloseObject">
            <summary>
            close object before writing to PDF file
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfAcroComboBoxField">
            <summary>
            Acro field combo box
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroComboBoxField.Edit">
            <summary>
            Enable edit
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroComboBoxField.Sort">
            <summary>
            Sort indicator
            NOTE: PDF Readers ignore this flag
            The reader will not sort the combobox items
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroComboBoxField.MultiSelect">
            <summary>
            Enable multi-select
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroComboBoxField.CommitOnSelChange">
            <summary>
            Commit on select change
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroComboBoxField.Items">
            <summary>
            Array of items
            Items will be displayed in array's order
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroComboBoxField.FieldValue">
            <summary>
            Field value (/V) (selected item)
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAcroComboBoxField.#ctor(PdfFileWriter.PdfAcroForm,PdfFileWriter.PdfPage,System.String)">
            <summary>
            Acro field choice constructor
            </summary>
            <param name="AcroForm">Acro form parent</param>
            <param name="AcroPage">Annotation page</param>
            <param name="FieldName">Combobox field name</param>
        </member>
        <member name="M:PdfFileWriter.PdfAcroComboBoxField.DrawComboBox">
            <summary>
            Draw combobox (appearance XObject)
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAcroComboBoxField.CloseObject">
            <summary>
            close object before writing to PDF file
            </summary>
        </member>
        <member name="T:PdfFileWriter.SigFlag">
            <summary>
            Signature flags
            Table 8.68 page 674 and 695
            Note: flags can be combined with OR oerator
            </summary>
        </member>
        <member name="F:PdfFileWriter.SigFlag.SignaturesExist">
            <summary>
            At least one signatre field exists
            </summary>
        </member>
        <member name="F:PdfFileWriter.SigFlag.AppendOnly">
            <summary>
            Append only
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfAcroForm">
            <summary>
            PDF AcroForm class (controls the /AcroForm dictionary)
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAcroForm.#ctor(PdfFileWriter.PdfDocument)">
            <summary>
            AcroForm constructor
            </summary>
            <param name="Document">PDF document</param>
        </member>
        <member name="M:PdfFileWriter.PdfAcroForm.CreateAcroForm(PdfFileWriter.PdfDocument)">
            <summary>
            Create or return existing PdfAcroForm
            </summary>
            <param name="Document">PDF document</param>
            <returns>PdfScroForm</returns>
        </member>
        <member name="M:PdfFileWriter.PdfAcroForm.AddField(PdfFileWriter.PdfAcroWidgetField)">
            <summary>
            Add new field to the list
            </summary>
            <param name="Field">PDF AcroField</param>
        </member>
        <member name="M:PdfFileWriter.PdfAcroForm.DefaultTextAppearance(PdfFileWriter.PdfDrawTextCtrl)">
            <summary>
            Default text fields appearance
            </summary>
            <param name="DefaultTextCtrl">PDF Font</param>
        </member>
        <member name="M:PdfFileWriter.PdfAcroForm.SignatureFlags(PdfFileWriter.SigFlag)">
            <summary>
            Signature flags
            </summary>
            <param name="SigFlags">SigFlags enumeration</param>
        </member>
        <member name="M:PdfFileWriter.PdfAcroForm.NeedAppearances(System.Boolean)">
            <summary>
            Need appearances dictionary
            </summary>
            <param name="NeedApp">Need appearances (true or false)</param>
        </member>
        <member name="M:PdfFileWriter.PdfAcroForm.CalculationOrder(PdfFileWriter.PdfAnnotation[])">
            <summary>
            Fields calculation order (option)
            </summary>
            <param name="AcroFields">Acro fields</param>
        </member>
        <member name="M:PdfFileWriter.PdfAcroForm.CloseObject">
            <summary>
            close object before writing to PDF file
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfAcroListBoxField">
            <summary>
            Acro field list box
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroListBoxField.Sort">
            <summary>
            Sort indicator
            NOTE: PDF Readers ignore this flag
            The reader will not sort the combobox items
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroListBoxField.MultiSelect">
            <summary>
            Enable multi-select
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroListBoxField.CommitOnSelChange">
            <summary>
            Commit on select change
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroListBoxField.Items">
            <summary>
            Array of items to be displayed in the list box
            Items will be displayed in array's order
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroListBoxField.FieldValue">
            <summary>
            Field value (/V) (selected item)
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroListBoxField.TopIndex">
            <summary>
            The index of the first visible item
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAcroListBoxField.#ctor(PdfFileWriter.PdfAcroForm,PdfFileWriter.PdfPage,System.String,PdfFileWriter.PdfFontTypeOne,System.Double)">
            <summary>
            Acro field choice constructor
            </summary>
            <param name="AcroForm">Acro form parent</param>
            <param name="AcroPage">Annotation page</param>
            <param name="FieldName">Combobox field name</param>
            <param name="FontTypeOne">Font type one</param>
            <param name="FontSize">Font size in points</param>
        </member>
        <member name="M:PdfFileWriter.PdfAcroListBoxField.DrawListBox">
            <summary>
            Draw list box (Appearance XObject)
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAcroListBoxField.CloseObject">
            <summary>
            close object before writing to PDF file
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfAcroPageNode">
            <summary>
            List of all fields on one page
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAcroPageNode.#ctor(PdfFileWriter.PdfDocument)">
            <summary>
            List of acro fields for one page
            </summary>
            <param name="Document">PDF parent document</param>
        </member>
        <member name="M:PdfFileWriter.PdfAcroPageNode.AddField(PdfFileWriter.PdfAcroWidgetField)">
            <summary>
            Add acro field except radio button field
            </summary>
            <param name="Field">Acro widget field</param>
        </member>
        <member name="M:PdfFileWriter.PdfAcroPageNode.CloseObject">
            <summary>
            close object before writing to PDF file
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfAcroRadioButton">
            <summary>
            Radio button widget
            A group of radio buttons will make one field
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroRadioButton.Check">
            <summary>
            This radio button widget is on
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAcroRadioButton.OnStateName">
            <summary>
            On-state name (the off-state is always "Off") 
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAcroRadioButton.RadioButtonColor">
            <summary>
            ZapfDingbats font color
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAcroRadioButton.#ctor(PdfFileWriter.PdfAcroForm,PdfFileWriter.PdfPage,System.String,System.String)">
            <summary>
            Acro field radio button constructor
            </summary>
            <param name="AcroForm">Acro form object</param>
            <param name="AcroPage">Current page</param>
            <param name="GroupName">Group of radio buttons name</param>
            <param name="OnStateName">Radio button on value</param>
        </member>
        <member name="M:PdfFileWriter.PdfAcroRadioButton.DrawRadioButton(PdfFileWriter.AppearanceType,System.Boolean)">
            <summary>
            Draw radio button
            </summary>
            <param name="AppType">Appearance type (Normal, Down, Rollover)</param>
            <param name="Selected">Selected</param>
        </member>
        <member name="M:PdfFileWriter.PdfAcroRadioButton.CloseObject">
            <summary>
            close object before writing to PDF file
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfAcroRadioButtonGroup">
            <summary>
            Radio buttons group class
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAcroRadioButtonGroup.GroupName">
            <summary>
            Field partial name (/T)
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAcroRadioButtonGroup.RadioButtonsList">
            <summary>
            List of all buttons in this group
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAcroRadioButtonGroup.CloseObject">
            <summary>
            close object before writing to PDF file
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfAcroTextField">
            <summary>
            Acro text field
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAcroTextField.TextMaxLength">
            <summary>
            Acro text field maximum length
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAcroTextField.FieldValue">
            <summary>
            Text field value (/V)
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAcroTextField.DefaultValue">
            <summary>
            Text field default value (/DV)
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroTextField.Multiline">
            <summary>
            Multi-line text
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroTextField.Password">
            <summary>
            Password text field
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroTextField.FileSelect">
            <summary>
            File select
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroTextField.DoNotSpellCheck">
            <summary>
            Do not spell check
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroTextField.DoNotScroll">
            <summary>
            Do not scroll
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAcroTextField.#ctor(PdfFileWriter.PdfAcroForm,PdfFileWriter.PdfPage,System.String)">
            <summary>
            Acro text field constructor
            </summary>
            <param name="AcroForm">Acro form object (parent of all fields)</param>
            <param name="AnnotPage">Annotation page</param>
            <param name="FieldName">Field name</param>
        </member>
        <member name="M:PdfFileWriter.PdfAcroTextField.DrawTextField">
            <summary>
            Draw text field (XObject appearance stream)
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAcroTextField.CloseObject">
            <summary>
            close object before writing to PDF file
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfAcroWidgetField">
            <summary>
            Widget field class
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAcroWidgetField.FieldName">
            <summary>
            Field partial name (/T)
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAcroWidgetField.FieldFlags">
            <summary>
            Field flags
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAcroWidgetField.AlternateName">
            <summary>
            Alternate field name (/TU)
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAcroWidgetField.MappingName">
            <summary>
            Mapping field name (/TM)
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAcroWidgetField.FieldFormatEvent">
            <summary>
            AA dictionary format event (/F)
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAcroWidgetField.FieldKeystrokeEvent">
            <summary>
            AA dictionary keystroke event (/K)
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAcroWidgetField.TextCtrl">
            <summary>
            Text appearace font
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroWidgetField.ReadOnly">
            <summary>
            Set field to read only
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroWidgetField.Required">
            <summary>
            Set field to required (cannot be blank)
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAcroWidgetField.NoExport">
            <summary>
            Set field to no export
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAcroWidgetField.CloseObject">
            <summary>
            close object before writing to PDF file
            </summary>
        </member>
        <member name="T:PdfFileWriter.AppearanceType">
            <summary>
            Appearance type code
            </summary>
        </member>
        <member name="F:PdfFileWriter.AppearanceType.Normal">
            <summary>
            Normal appearance
            </summary>
        </member>
        <member name="F:PdfFileWriter.AppearanceType.Rollover">
            <summary>
            Pointing device rollover appearance
            </summary>
        </member>
        <member name="F:PdfFileWriter.AppearanceType.Down">
            <summary>
            Pointing device down appearance
            </summary>
        </member>
        <member name="T:PdfFileWriter.BorderStyle">
            <summary>
            Border style
            </summary>
        </member>
        <member name="F:PdfFileWriter.BorderStyle.Solid">
            <summary>
            Border style solid line
            </summary>
        </member>
        <member name="F:PdfFileWriter.BorderStyle.Dashed">
            <summary>
            Border style dashed line
            </summary>
        </member>
        <member name="F:PdfFileWriter.BorderStyle.Beveled">
            <summary>
            Border style beveled line
            </summary>
        </member>
        <member name="F:PdfFileWriter.BorderStyle.Inset">
            <summary>
            Border style inset line
            </summary>
        </member>
        <member name="F:PdfFileWriter.BorderStyle.Underline">
            <summary>
            Border style underline
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfAnnotation">
            <summary>
            PDF Annotation class
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAnnotation.AnnotPage">
            <summary>
            Annotation page (/P)
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAnnotation.AnnotRect">
            <summary>
            Annotation rectangle (/Rect)
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAnnotation.AnnotText">
            <summary>
            Annotation text or description (/Contents)
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAnnotation.AnnotFlags">
            <summary>
            Annotation flags (/F)
            This program sets Bit 3 (value=4) Allow print
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAnnotation.AppearanceState">
            <summary>
            Appearance state (/AS)
            selects the applicable appearance stream from an appearance subdictionary
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAnnotation.AppearanceDictionary">
            <summary>
            Appearance dictionary (/AP)
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAnnotation.BorderWidth">
            <summary>
            Border width (/BS&lt;&lt;/W x&gt;&gt;)
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAnnotation.BorderStyle">
            <summary>
            Border style (/BS&lt;&lt;/W x/S/code&gt;&gt;)
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAnnotation.BorderDashArray">
            <summary>
            Border dash array (/BS7ltl&lt;/summary>W x/S/D/D[x x x]&gt;&gt;)
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAnnotation.ColorSpecific">
            <summary>
            Color value for some specifc cases (/C)
            Color of: The background of the annotation’s icon when closed
            The title bar of the annotation’s pop-up window
            The border of a link annotation
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAnnotation.OptionalContent">
            <summary>
            Optional content (Layer control) (/OC)
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotation.#ctor(PdfFileWriter.PdfPage,System.String)">
            <summary>
            PDF annotation constructor
            </summary>
            <param name="AnnotPage">Annotation page</param>
            <param name="Subtype">Annotation subtype</param>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotation.AddAppearance(PdfFileWriter.PdfXObject,PdfFileWriter.AppearanceType)">
            <summary>
            Add appearance XObject to annotation
            </summary>
            <param name="AppearanceObject">Appearance XObject</param>
            <param name="AppearanceType">Appearance type</param>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotation.AddAppearance(PdfFileWriter.PdfXObject,PdfFileWriter.AppearanceType,System.String)">
            <summary>
            Add appearance XObject to annotation
            </summary>
            <param name="AppearanceObject">Appearance XObject</param>
            <param name="AppearanceType">Appearance type</param>
            <param name="AppearanceSubtype">Appearance subtype</param>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotation.CloseObject">
            <summary>
            close object before writing to PDF file
            </summary>
        </member>
        <member name="T:PdfFileWriter.MediaWindow">
            <summary>
            Media window position
            </summary>
        </member>
        <member name="F:PdfFileWriter.MediaWindow.Floating">
            <summary>
            Floating window
            </summary>
        </member>
        <member name="F:PdfFileWriter.MediaWindow.FullScreen">
            <summary>
            Full screen
            </summary>
        </member>
        <member name="F:PdfFileWriter.MediaWindow.Hidden">
            <summary>
            Hidden
            </summary>
        </member>
        <member name="F:PdfFileWriter.MediaWindow.Annotation">
            <summary>
            Annotation rectangle
            </summary>
        </member>
        <member name="T:PdfFileWriter.TempFilePermission">
            <summary>
            Temporary file permission enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.TempFilePermission.TEMPNEVER">
            <summary>
            Never allow PDF reader to write temporary file.
            </summary>
        </member>
        <member name="F:PdfFileWriter.TempFilePermission.TEMPEXTRACT">
            <summary>
            Allow PDF reader to write temporary file based on extract permission flag.
            </summary>
        </member>
        <member name="F:PdfFileWriter.TempFilePermission.TEMPACCESS">
            <summary>
            Allow PDF reader to write temporary file based on access permission flag.
            </summary>
        </member>
        <member name="F:PdfFileWriter.TempFilePermission.TEMPALWAYS">
            <summary>
            Always allow PDF reader to write temporary file.
            </summary>
        </member>
        <member name="T:PdfFileWriter.WindowPosition">
            <summary>
            Media image position within window
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowPosition.UpperLeft">
            <summary>
            Upper left
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowPosition.UpperCenter">
            <summary>
            Upper center
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowPosition.UpperRight">
            <summary>
            Upper right
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowPosition.CenterLeft">
            <summary>
            Center left
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowPosition.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowPosition.CenterRight">
            <summary>
            Center right
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowPosition.LowerLeft">
            <summary>
            Lower left
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowPosition.LowerCenter">
            <summary>
            lower center
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowPosition.LowerRight">
            <summary>
            Lower right
            </summary>
        </member>
        <member name="T:PdfFileWriter.WindowResize">
            <summary>
            Floating window resize options
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowResize.NoResize">
            <summary>
            No resize
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowResize.KeepAspectRatio">
            <summary>
            Resize with correct aspect ratio
            </summary>
        </member>
        <member name="F:PdfFileWriter.WindowResize.NoAspectRatio">
            <summary>
            Resize without aspect ratio
            </summary>
        </member>
        <member name="T:PdfFileWriter.MediaOperation">
            <summary>
            Media operation code
            </summary>
            <remarks>
            <para>
            Operation to perform when rendition action is triggered.
            Page 669 T 8.64 S 8.5
            </para>
            </remarks>
        </member>
        <member name="F:PdfFileWriter.MediaOperation.Play">
            <summary>
            Play
            </summary>
        </member>
        <member name="F:PdfFileWriter.MediaOperation.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="F:PdfFileWriter.MediaOperation.Pause">
            <summary>
            Pause
            </summary>
        </member>
        <member name="F:PdfFileWriter.MediaOperation.Resume">
            <summary>
            Resume
            </summary>
        </member>
        <member name="F:PdfFileWriter.MediaOperation.PlayAfterPause">
            <summary>
            Play after pause
            </summary>
        </member>
        <member name="T:PdfFileWriter.ScaleMediaCode">
            <summary>
            Scale media code
            </summary>
            <remarks>
            <para>
            Value 0 to 5 How to scale the media to fit annotation area page 770 T 9.15
            </para>
            </remarks>
        </member>
        <member name="F:PdfFileWriter.ScaleMediaCode.KeepAspectRatioShowAll">
            <summary>
            Keep aspect ratio and show all.
            </summary>
        </member>
        <member name="F:PdfFileWriter.ScaleMediaCode.KeepAspectRatioSlice">
            <summary>
            Keep aspect ratio fit the one side and slice the other
            </summary>
        </member>
        <member name="F:PdfFileWriter.ScaleMediaCode.FillAnotationRect">
            <summary>
            Ignore aspect ratio and fill annotation rectangle
            </summary>
        </member>
        <member name="F:PdfFileWriter.ScaleMediaCode.NoScaleWithScroll">
            <summary>
            No scaling. Provide scroll if required
            </summary>
        </member>
        <member name="F:PdfFileWriter.ScaleMediaCode.NoScaleSlice">
            <summary>
            No scaling. Show what fits
            </summary>
        </member>
        <member name="F:PdfFileWriter.ScaleMediaCode.PlayerDefault">
            <summary>
            Let media player handle it
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfAnnotDisplayMedia">
            <summary>
            Display video or play sound class
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotDisplayMedia.#ctor(PdfFileWriter.PdfPage,PdfFileWriter.PdfEmbeddedFile)">
            <summary>
            Display media annotation action constructor
            </summary>
            <param name="AnnotPage">Annotation page</param>
            <param name="MediaFile">PdfEmbeddedFile media contents</param>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotDisplayMedia.#ctor(PdfFileWriter.PdfPage,PdfFileWriter.PdfAnnotDisplayMedia)">
            <summary>
            Display media annotation action constructor
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotDisplayMedia.ActivateWhenPageIsVisible">
            <summary>
            Activate media when page becomes visible
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAnnotDisplayMedia.MediaWindowType">
            <summary>
            Media window type
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotDisplayMedia.FloatingWindowSize(System.Int32,System.Int32)">
            <summary>
            Set floating window size
            </summary>
            <param name="Width">Width</param>
            <param name="Height">Height</param>
        </member>
        <member name="P:PdfFileWriter.PdfAnnotDisplayMedia.FloatingWindowPosition">
            <summary>
            Set floating window position
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAnnotDisplayMedia.FloatingWindowTitleBar">
            <summary>
            Set floating window title bar
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAnnotDisplayMedia.FloatingWindowCloseButton">
            <summary>
            Set floating window close button
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAnnotDisplayMedia.FloatingWindowTitleText">
            <summary>
            Set floating window's title text
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAnnotDisplayMedia.FloatingWindowResize">
            <summary>
            Set window resize
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAnnotDisplayMedia.DisplayControls">
            <summary>
            Display media player controls
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAnnotDisplayMedia.RepeatCount">
            <summary>
            Repeat count
            </summary>
            <remarks>
            <para>
            Count of zero means replay indefinitly.
            </para>
            <para>
            Negative count is an error.
            </para>
            <para>
            Count is a real (float) number. The PDF specification does not
            define how non integers are treated.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfAnnotDisplayMedia.ScaleMedia">
            <summary>
            Scale media code
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAnnotDisplayMedia.InitialMediaOperation">
            <summary>
            Initial media operation code
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAnnotDisplayMedia.MediaTempFilePermission">
            <summary>
            Media temporary file permission flag
            </summary>
            <remarks><para>
            The PDF reader must save the media file to a temporary file
            in order for the player to play it.
            </para></remarks>
        </member>
        <member name="T:PdfFileWriter.FileAttachIcon">
            <summary>
            File attachement icon
            </summary>
        </member>
        <member name="F:PdfFileWriter.FileAttachIcon.PushPin">
            <summary>
            PushPin (28 by 40) (default)
            </summary>
        </member>
        <member name="F:PdfFileWriter.FileAttachIcon.Graph">
            <summary>
            Graph (40 by 40)
            </summary>
        </member>
        <member name="F:PdfFileWriter.FileAttachIcon.Paperclip">
            <summary>
            Paperclip (14 by 34)
            </summary>
        </member>
        <member name="F:PdfFileWriter.FileAttachIcon.Tag">
            <summary>
            Tag (40 by 32)
            </summary>
        </member>
        <member name="F:PdfFileWriter.FileAttachIcon.NoIcon">
            <summary>
            no icon 
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfAnnotFileAttachment">
            <summary>
            Save or view embedded file
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfAnnotFileAttachment.IconAspectRatio">
            <summary>
            Icon aspect ratio
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotFileAttachment.#ctor(PdfFileWriter.PdfPage,PdfFileWriter.PdfEmbeddedFile,PdfFileWriter.FileAttachIcon)">
            <summary>
            File attachement constructor
            </summary>
            <param name="AnnotPage">Annotation page</param>
            <param name="EmbeddedFile">Embedded file</param>
            <param name="Icon">Icon enumeration</param>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotFileAttachment.#ctor(PdfFileWriter.PdfPage,PdfFileWriter.PdfAnnotFileAttachment)">
            <summary>
            File attachment copy constructor
            </summary>
            <param name="AnnotPage">Annotation page</param>
            <param name="Other">Another file attachment</param>
        </member>
        <member name="T:PdfFileWriter.PdfAnnotLinkAction">
            <summary>
            Link to location marker within the document
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotLinkAction.#ctor(PdfFileWriter.PdfPage,System.String)">
            <summary>
            Go to annotation action constructor
            </summary>
            <param name="AnnotPage">Annotation page</param>
            <param name="LocMarkerName">Location marker name</param>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotLinkAction.#ctor(PdfFileWriter.PdfPage,PdfFileWriter.PdfAnnotLinkAction)">
            <summary>
            Duplicate annotation link action
            </summary>
            <param name="AnnotPage">Annotation page</param>
            <param name="Other">Original link action</param>
        </member>
        <member name="T:PdfFileWriter.StickyNoteIcon">
            <summary>
            Sticky note icon
            </summary>
        </member>
        <member name="F:PdfFileWriter.StickyNoteIcon.Comment">
            <summary>
            Comment (note: no icon)
            </summary>
        </member>
        <member name="F:PdfFileWriter.StickyNoteIcon.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="F:PdfFileWriter.StickyNoteIcon.Note">
            <summary>
            Note (default)
            </summary>
        </member>
        <member name="F:PdfFileWriter.StickyNoteIcon.Help">
            <summary>
            Help
            </summary>
        </member>
        <member name="F:PdfFileWriter.StickyNoteIcon.NewParagraph">
            <summary>
            New paragraph
            </summary>
        </member>
        <member name="F:PdfFileWriter.StickyNoteIcon.Paragraph">
            <summary>
            Paragraph
            </summary>
        </member>
        <member name="F:PdfFileWriter.StickyNoteIcon.Insert">
            <summary>
            Insert
            </summary>
        </member>
        <member name="F:PdfFileWriter.StickyNoteIcon.NoIcon">
            <summary>
            No icon
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfAnnotStickyNote">
            <summary>
            Display sticky note
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotStickyNote.#ctor(PdfFileWriter.PdfPage,System.String,PdfFileWriter.StickyNoteIcon)">
            <summary>
            Sticky note annotation action constructor
            </summary>
            <param name="AnnotPage">Annotation page</param>
            <param name="Note">Sticky note text</param>
            <param name="Icon">Sticky note icon</param>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotStickyNote.#ctor(PdfFileWriter.PdfPage,PdfFileWriter.PdfAnnotStickyNote)">
            <summary>
            Sticky note annotation action constructor
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfAnnotWebLink">
            <summary>
            Web link annotation action
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotWebLink.#ctor(PdfFileWriter.PdfPage,System.String)">
            <summary>
            Web link constructor
            </summary>
            <param name="AnnotPage">Annotation page</param>
            <param name="WebLinkStr">Web link string</param>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotWebLink.#ctor(PdfFileWriter.PdfPage,PdfFileWriter.PdfAnnotWebLink)">
            <summary>
            Copy constructor
            </summary>
            <param name="AnnotPage">Annotation page</param>
            <param name="Other">Annotation to copy</param>
        </member>
        <member name="T:PdfFileWriter.PdfAnnotWidget">
            <summary>
            Annotation widget for user interactive fields
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAnnotWidget.BorderColor">
            <summary>
            Border color (/BC)
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAnnotWidget.BackgroundColor">
            <summary>
            Background color (/BG)
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAnnotWidget.Caption">
            <summary>
            Caption (/CA)
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotWidget.#ctor(PdfFileWriter.PdfPage)">
            <summary>
            Widget annotation (base for fields)
            </summary>
            <param name="AnnotPage">Annotation page</param>
        </member>
        <member name="M:PdfFileWriter.PdfAnnotWidget.CloseObject">
            <summary>
            close object before writing to PDF file
            </summary>
        </member>
        <member name="T:PdfFileWriter.ArcType">
            <summary>
            Arc type for DrawArc method
            </summary>
        </member>
        <member name="F:PdfFileWriter.ArcType.SmallCounterClockWise">
            <summary>
            Small arc drawn in counter clock wise direction
            </summary>
        </member>
        <member name="F:PdfFileWriter.ArcType.SmallClockWise">
            <summary>
            Small arc drawn in clock wise direction
            </summary>
        </member>
        <member name="F:PdfFileWriter.ArcType.LargeCounterClockWise">
            <summary>
            Large arc drawn in counter clock wise direction
            </summary>
        </member>
        <member name="F:PdfFileWriter.ArcType.LargeClockWise">
            <summary>
            Large arc drawn in clock wise direction
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfArcToBezier">
            <summary>
            Convert eliptical arc to Bezier segments
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfArcToBezier.CreateArc(PdfFileWriter.PointD,PdfFileWriter.PointD,PdfFileWriter.SizeD,System.Double,PdfFileWriter.ArcType)">
            <summary>
            Create eliptical arc
            </summary>
            <param name="ArcStart">Arc start point</param>
            <param name="ArcEnd">Arc end point</param>
            <param name="Radius">RadiusX as width and RadiusY as height</param>
            <param name="Rotate">X axis rotation angle in radians</param>
            <param name="Type">Arc type enumeration</param>
            <returns>Array of points.</returns>
        </member>
        <member name="M:PdfFileWriter.PdfArcToBezier.CircularArc(PdfFileWriter.PointD,PdfFileWriter.PointD,System.Double,PdfFileWriter.ArcType)">
            <summary>
            Create circular arc
            </summary>
            <param name="ArcStart">Arc starting point</param>
            <param name="ArcEnd">Arc ending point</param>
            <param name="Radius">Arc radius</param>
            <param name="Type">Arc type</param>
            <returns>Array of points.</returns>
        </member>
        <member name="T:PdfFileWriter.MappingMode">
            <summary>
            Mapping mode for axial and radial shading
            </summary>
        </member>
        <member name="F:PdfFileWriter.MappingMode.Relative">
            <summary>
            Relative to bounding box
            </summary>
        </member>
        <member name="F:PdfFileWriter.MappingMode.Absolute">
            <summary>
            Absolute
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfAxialShading">
            <summary>
            PDF axial shading resource class
            </summary>
            <remarks>
            Derived class from PdfObject
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfAxialShading.BBox">
            <summary>
            Bounding box rectangle
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAxialShading.Direction">
            <summary>
            Direction rectangle
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfAxialShading.Mapping">
            <summary>
            Mapping mode
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfAxialShading.#ctor(PdfFileWriter.PdfDocument,PdfFileWriter.PdfShadingFunction)">
            <summary>
            PDF axial shading constructor.
            </summary>
            <param name="Document">Parent PDF document object</param>
            <param name="ShadingFunction">Shading function</param>
        </member>
        <member name="M:PdfFileWriter.PdfAxialShading.AntiAlias(System.Boolean)">
            <summary>
            Sets anti-alias parameter
            </summary>
            <param name="Value">Anti-alias true or false</param>
        </member>
        <member name="M:PdfFileWriter.PdfAxialShading.ExtendShading(System.Boolean,System.Boolean)">
            <summary>
            Extend shading beyond axis
            </summary>
            <param name="Before">Before (true or false)</param>
            <param name="After">After (true or false)</param>
        </member>
        <member name="T:PdfFileWriter.PdfBarcode">
            <summary>
            One dimension barcode base class
            </summary>
            <remarks>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#BarcodeSupport">2.5 Barcode Support</a>
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfBarcode.CodeArray">
            <summary>
            Gets a copy of CodeArray
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfBarcode.Text">
            <summary>
            Text string
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfBarcode.BarCount">
            <summary>
            Total number of black and white bars
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfBarcode.TotalWidth">
            <summary>
            Total barcode width in narrow bar units.
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfBarcode.#ctor">
            <summary>
            Protected barcode constructor
            </summary>
            <remarks>This class cannot be instantiated by itself.</remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBarcode.BarWidth(System.Int32)">
            <summary>
            Width of single bar code at indexed position expressed in narrow bar units.
            </summary>
            <param name="Index">Bar's index number.</param>
            <returns>Bar's width in narrow bar units.</returns>
            <remarks>This virtual function must be implemented by derived class 
            Index range is 0 to BarCount - 1</remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBarcode.GetBarcodeBox(PdfFileWriter.PdfDrawBarcodeCtrl)">
            <summary>
            Calculate total barcode height including text
            </summary>
            <param name="BarcodeCtrl">Draw barcode control</param>
            <returns>Bounding box rectangle</returns>
        </member>
        <member name="T:PdfFileWriter.PdfBarcode128">
            <summary>
            Barcode 128 Class
            </summary>
            <remarks>
            This program supports ASCII range of 0 to 127. 
            Character range 128 to 255 is not supported.
            </remarks>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode128.CODE_CHAR_BARS">
            <summary>
            Each code128 character is encoded as 3 black bars and 3 white bars.
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode128.CODE_CHAR_WIDTH">
            <summary>
            Each code128 character width is 11 narrow bars.
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode128.FNC1_CHAR">
            <summary>
            Function character FNC1.
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode128.FNC2_CHAR">
            <summary>
            Function character FNC2.
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode128.FNC3_CHAR">
            <summary>
            Function character FNC3.
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode128.FNC1">
            <summary>
            Special code FNC1.
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode128.FNC2">
            <summary>
            Special code FNC2.
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode128.FNC3">
            <summary>
            Special code FNC3.
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode128.SHIFT">
            <summary>
            Special code SHIFT.
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode128.CODEA">
            <summary>
            Special code CODEA (or FN4 for code set A).
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode128.CODEB">
            <summary>
            Special code CODEB (or FN4 for code set B).
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode128.CODEC">
            <summary>
            Special code CODEC.
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode128.STARTA">
            <summary>
            Special code STARTA.
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode128.STARTB">
            <summary>
            Special code STARTB.
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode128.STARTC">
            <summary>
            Special code STARTC.
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode128.STOP">
            <summary>
            Special code STOP.
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode128.CodeTable">
            <summary>
            Code table for barcode 128
            </summary>
            <Remarks>
            <para>
            Barcode 128 consists of 107 codes.
            </para>
            <para>
            Each code is made of 6 bars, three black bars and three white bars.
            Each bar is expressed as multiple of the narrow bar.
            </para>
            <para>
            Total width of one bar code is always 11 narrow bar units.
            </para>
            <para>
            After the stop code there is always one more black bar
            with width of two units.
            </para>
            <para>
            Each code can have one of three possible meanings
            depending on the mode (CODEA, CODEB, CODEC).
            </para>
            <para>
            The CodeTable array dimensions are [107, 6].
            </para>
            </Remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBarcode128.BarWidth(System.Int32)">
            <summary>
            Width of one bar at indexed position in narrow bar units.
            </summary>
            <param name="Index">Bar's index number.</param>
            <returns>Bar's width in narrow bar units.</returns>
            <remarks>This virtual function must be implemented by derived class 
            Index range is 0 to BarCount - 1</remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBarcode128.#ctor(System.String)">
            <summary>
            Barcode 128 constructor
            </summary>
            <param name="Text">Input text</param>
            <remarks>
            <para>
            Convert text to code 128.
            </para>
            <para>>
            Valid input characters are ASCII 0 to 127.
            </para>
            <para>>
            In addition three control function codes are available
            </para>
            <para>>
            FNC1_CHAR = (char) 256;
            </para>
            <para>>
            FNC2_CHAR = (char) 257;
            </para>
            <para>>
            FNC3_CHAR = (char) 258;
            </para>
            <para>>
            The constructor will optimize the translation of text to code.
            The code array will be divided into segments of
            CODEA, CODEB and CODEC
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBarcode128.#ctor(System.Int32[])">
            <summary>
            Barcode 128 constructor
            </summary>
            <param name="_CodeArray">Code array</param>
            <remarks>
            <para>
            Set Code Array and convert it to text.
            </para>
            <para>
            Each code must be 0 to 106.
            </para>
            <para>
            The first code must be 103, 104 or 105.
            </para>
            <para>
            The stop code 106 if present must be the last code.
            </para>
            <para>
            If the last code is not 106, the method calculates the checksum
            and appends the checksum and the stop character to the end of the array.
            </para>
            <para>
            If the stop code is missing you must not have a checksum.
            If the last code is 106, the method recalculates the checksum
            and replaces the existing checksum.
            </para>
            <para>
            The text output is made of ASCII characters 0 to 127 and
            three function characters 256, 257 and 258.
            </para>
            </remarks>
        </member>
        <member name="T:PdfFileWriter.PdfBarcode39">
            <summary>
            Barcode 39 class
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode39.CODE_CHAR_BARS">
            <summary>
            Each code39 code is encoded as 5 black bars and 5 white bars.
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode39.CODE_CHAR_WIDTH">
            <summary>
            Total length expressed in narrow bar units.
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode39.START_STOP_CODE">
            <summary>
            Barcode39 start and stop character (normally displayed as *).
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode39.CharSet">
            <summary>
            Barcode39 supported characters.
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcode39.CodeTable">
            <summary>
            Code table for barcode 39
            </summary>
            <remarks>Array size [44, 10]</remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBarcode39.BarWidth(System.Int32)">
            <summary>
            Bar width as function of position in the barcode 39 
            </summary>
            <param name="Index">Array index.</param>
            <returns>Width of one bar</returns>
        </member>
        <member name="M:PdfFileWriter.PdfBarcode39.#ctor(System.String)">
            <summary>
            Barcode 39 constructor
            </summary>
            <param name="Text">Barcode text</param>
            <remarks>
            <para>
            The constructor converts the text into code.
            </para>
            <para>
            Valid characters are:
            </para>
            <list type="table">
            <item><description>Digits 0 to 9</description></item>
            <item><description>Capital Letters A to Z</description></item>
            <item><description>Dash '-'</description></item>
            <item><description>Period '.'</description></item>
            <item><description>Space ' '</description></item>
            <item><description>Dollar '$'</description></item>
            <item><description>Slash '/'</description></item>
            <item><description>Plus '+'</description></item>
            <item><description>Percent '%'</description></item>
            <item><description>Asterisk '*' (This is the start and stop
            character. It cannot be in the middle of the text).</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBarcode39.#ctor(System.Int32[])">
            <summary>
            Barcode 39 constructor
            </summary>
            <param name="_CodeArray">Code array</param>
            <remarks>
            <para>
            Sets code array and converts to equivalent text.
            </para>
            <para>
            If the code array is missing the start and/or stop characters,
            the constructor will add them.
            </para>
            <para>
            Valid codes are:
            </para>
            <list type="table">
            <item><term>0 to 9</term><description>Digits 0 to 9</description></item>
            <item><term>10 to 35</term><description>Capital Letters A to Z</description></item>
            <item><term>36</term><description>Dash '-'</description></item>
            <item><term>37</term><description>Period '.'</description></item>
            <item><term>38</term><description>Space ' '</description></item>
            <item><term>39</term><description>Dollar '$'</description></item>
            <item><term>40</term><description>Slash '/'</description></item>
            <item><term>41</term><description>Plus '+'</description></item>
            <item><term>42</term><description>Percent '%'</description></item>
            <item><term>43</term><description>Asterisk '*' (This is the start and stop
            character. It cannot be in the middle of the text)</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:PdfFileWriter.PdfBarcodeEAN13">
            <summary>
            Barcode EAN-13 or UPC-A class
            </summary>
            <remarks>
            Barcode EAN-13 or UPC-A
            Note UPC-A is a subset of EAN-13
            UPC-A is made of 12 digits
            EAN-13 is made of 13 digits
            If the first digit of EAN-13 is zero it is considered to be
            UPC-A. The zero will be eliminated.
            The barcode in both cases is made out of 12 symbols.
            </remarks>
        </member>
        <member name="F:PdfFileWriter.PdfBarcodeEAN13.BARCODE_LEN">
            <summary>
            Barcode length
            </summary>
            <remarks>
            Each code EAN-13 or UPC-A code is encoded as 2 black bars and 2 white bars
            there are exactly 12 characters in a barcode.
            </remarks>
        </member>
        <member name="F:PdfFileWriter.PdfBarcodeEAN13.BARCODE_HALF_LEN">
            <summary>
            Barcode half length
            </summary>
            <remarks>
            Each code EAN-13 or UPC-A code is encoded as 2 black bars and 2 white bars
            there are exactly 12 characters in a barcode
            </remarks>
        </member>
        <member name="F:PdfFileWriter.PdfBarcodeEAN13.LEAD_BARS">
            <summary>
            Lead bars
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcodeEAN13.SEPARATOR_BARS">
            <summary>
            Separator bars
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcodeEAN13.CODE_CHAR_BARS">
            <summary>
            Code character bars
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcodeEAN13.CODE_CHAR_WIDTH">
            <summary>
            Code character width
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcodeEAN13.CodeTable">
            <summary>
            Code table for Barcode EAN-13 or UPC-A
            </summary>
            <remarks>Array size [20, 4]</remarks>
        </member>
        <member name="F:PdfFileWriter.PdfBarcodeEAN13.ParityTable">
            <summary>
            Parity table
            </summary>
            <remarks>First digit of EAN-13 odd/even translation table</remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBarcodeEAN13.BarWidth(System.Int32)">
            <summary>
            Barcode width
            </summary>
            <param name="BarIndex">Code array index</param>
            <returns>Barcode EAN-13 single bar width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfBarcodeEAN13.GetBarcodeBox(PdfFileWriter.PdfDrawBarcodeCtrl)">
            <summary>
            Calculate total barcode height including text
            </summary>
            <param name="BarcodeCtrl">Draw barcode control</param>
            <returns>Bounding box rectangle</returns>
        </member>
        <member name="M:PdfFileWriter.PdfBarcodeEAN13.#ctor(System.String)">
            <summary>
            Barcode EAN13 Constructor
            </summary>
            <param name="Text">Input text</param>
            <remarks>
            <para>
            Convert text to code EAN-13 or UPC-A.
            </para>
            <para>
            All characters must be digits.
            </para>
            <para>
            The code is EAN-13 if string length is 13 characters
            and first digit is not zero.
            </para>
            <para>
            The code is UPC-A if string length is 12 characters
            or string length is 13 and first character is zero.
            </para>
            <para>
            The last character is a checksum. The checksum must be
            given, however the constructor calculates the checksum and
            override the one given. In other words, if you do not
            know the checksum just set the last digit to 0.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBarcodeEAN13.#ctor(System.Int32[])">
            <summary>
            Barcode EAN13 constructor.
            </summary>
            <param name="_CodeArray">Code array input.</param>
            <remarks>
            <para>
            The constructor sets CodeArray and converts it to text.
            </para>
            <para>
            CodeArray must be 12 elements long for both EAN-13 or UPC-A.
            </para>
            <para>
            In the case of UPC-A the 12 elements of code array correspond
            one to one with the 12 digits of the encoded value.
            </para>
            <para>
            In the case of EAN-13 the 12 code elements corresponds to
            element 2 to 13 of the text characters. The first text
            character controls how elements 2 to 5 of the code array are
            encoded. Please read the following article for full description.
            http://www.barcodeisland.com/ean13.phtml.
            </para>
            <para>
            In this class, odd parity encoding is one code element equals one digit.
            </para>
            <para>
            Even parity is code element equals digit plus 10.
            </para>
            <para>
            The last code element is a checksum. The checksum must be
            given however the constructor calculates the checksum and
            override the one given. In other words, if you do not
            know the checksum just set the last element to 0.
            </para>
            </remarks>
        </member>
        <member name="T:PdfFileWriter.PdfBarcodeInterleaved2of5">
            <summary>
            Barcode interleaved 2 of 5 class
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBarcodeInterleaved2of5.CodeTable">
            <summary>
            Code table for interleave 2 of 5 barcode
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfBarcodeInterleaved2of5.BarWidth(System.Int32)">
            <summary>
            Barcode width
            </summary>
            <param name="BarIndex">Code array index</param>
            <returns>float bar width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfBarcodeInterleaved2of5.#ctor(System.String,System.Boolean)">
            <summary>
            Barcode interleave 2 of 5 constructor
            </summary>
            <param name="Text">Text</param>
            <param name="AddChecksum">Add checksum digit</param>
        </member>
        <member name="T:PdfFileWriter.PdfBinaryWriter">
            <summary>
            PDF binary writer class
            </summary>
            <remarks>
            Extends .NET BinaryWriter class.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBinaryWriter.#ctor(System.IO.Stream)">
            <summary>
            PDF binary writer constructor
            </summary>
            <param name="Stream">File or memory stream</param>
        </member>
        <member name="M:PdfFileWriter.PdfBinaryWriter.WriteString(System.String)">
            <summary>
            Write String.
            </summary>
            <param name="Str">Input string</param>
            <remarks>
            Convert each character from two bytes to one byte.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBinaryWriter.WriteString(System.Text.StringBuilder)">
            <summary>
            Write String.
            </summary>
            <param name="Str">Input string</param>
            <remarks>
            Convert each character from two bytes to one byte.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBinaryWriter.WriteFormat(System.String,System.Object[])">
            <summary>
            Combine format string with write string.
            </summary>
            <param name="FormatStr">Standard format string</param>
            <param name="List">Array of objects</param>
        </member>
        <member name="T:PdfFileWriter.BookmarkTextStyle">
            <summary>
            Bookmark text style enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.BookmarkTextStyle.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:PdfFileWriter.BookmarkTextStyle.Italic">
            <summary>
            Italic
            </summary>
        </member>
        <member name="F:PdfFileWriter.BookmarkTextStyle.Bold">
            <summary>
            Bold
            </summary>
        </member>
        <member name="F:PdfFileWriter.BookmarkTextStyle.BoldItalic">
            <summary>
            Bold and italic
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfBookmark">
            <summary>
            PDF bookmark class
            </summary>
            <remarks>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#BookmarkSupport">2.9 Bookmark Support</a>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBookmark.AddBookmark(PdfFileWriter.PdfBookmarkCtrl,System.String,PdfFileWriter.PdfPage,System.Double,System.Double)">
            <summary>
            Add child bookmark
            </summary>
            <param name="BookmarkCtrl">Bookmark control</param>
            <param name="Title">Bookmark title.</param>
            <param name="Page">Page</param>
            <param name="XPos">Horizontal position</param>
            <param name="YPos">Vertical position.</param>
            <returns>Bookmark object</returns>
            <remarks>
            Add bookmark as a child to this bookmark.
            This method creates a new child bookmark item attached
            to this parent
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfBookmark.GetChild(System.Int32[])">
            <summary>
            Gets child bookmark
            </summary>
            <param name="IndexArray">Array of indices</param>
            <returns>Child bookmark or null if not found.</returns>
            <remarks>
            Gets PdfBookmark object based on index.
            You can have multiple indices separated by commas
            i.e. GetChild(2, 3);
            Index is zero based. In the example we are looking first for
            the third bookmark child and then the forth bookmark of the 
            next level.
            </remarks>
        </member>
        <member name="T:PdfFileWriter.PdfBookmarkCtrl">
            <summary>
            Add bookmark control structure
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBookmarkCtrl.Zoom">
            <summary>
            Zoom factor. 1.0 is 100%. 0.0 is no change from existing zoom.
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBookmarkCtrl.Color">
            <summary>
            Bookmark color
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBookmarkCtrl.TextStyle">
            <summary>
            Bookmark text style: normal, bold, italic, bold-italic
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfBookmarkCtrl.OpenEntries">
            <summary>
            Open children on click
            true: display children, false: hide children
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfByteArrayMethods">
            <summary>
            Class to manipulate byte array
            </summary>
        </member>
        <member name="T:PdfFileWriter.DrawStyle">
            <summary>
            PDF font style flags enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.DrawStyle.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:PdfFileWriter.DrawStyle.Underline">
            <summary>
            Underline
            </summary>
        </member>
        <member name="F:PdfFileWriter.DrawStyle.Strikeout">
            <summary>
            Strikeout
            </summary>
        </member>
        <member name="F:PdfFileWriter.DrawStyle.Subscript">
            <summary>
            Subscript
            </summary>
        </member>
        <member name="F:PdfFileWriter.DrawStyle.Superscript">
            <summary>
            Superscript
            </summary>
        </member>
        <member name="T:PdfFileWriter.PaintOp">
            <summary>
            Path painting and clipping operators enumeration
            </summary>
            <remarks>
            <para>
            Note Special path paining considerations in section 4.4
            of the PDF specifications. EOR is even odd rule. Otherwise
            it is nonzero winding number rule.
            </para>
            </remarks>
        </member>
        <member name="F:PdfFileWriter.PaintOp.NoOperator">
            <summary>
            No operator
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.NoPaint">
            <summary>
            No paint
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.Stroke">
            <summary>
            Stoke
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.CloseStroke">
            <summary>
            Close and stroke
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.Fill">
            <summary>
            close and Fill
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.FillEor">
            <summary>
            close and fill EOR
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.FillStroke">
            <summary>
            Fill and stoke
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.FillStrokeEor">
            <summary>
            Fill and stroke EOR
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.CloseFillStroke">
            <summary>
            Close, Fill and stroke
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.CloseFillStrokeEor">
            <summary>
            Close, Fill and Stroke EOR
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.ClipPathWnr">
            <summary>
            Clip path
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.ClipPathEor">
            <summary>
            Clip path EOR
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaintOp.CloseSubPath">
            <summary>
            Close sub-path
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfLineCap">
            <summary>
            PDF line cap enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfLineCap.Butt">
            <summary>
            Butt
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfLineCap.Round">
            <summary>
            Round
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfLineCap.Square">
            <summary>
            Square
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfLineJoin">
            <summary>
            PDF line join enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfLineJoin.Miter">
            <summary>
            Miter
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfLineJoin.Round">
            <summary>
            Round
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfLineJoin.Bevel">
            <summary>
            Bevel
            </summary>
        </member>
        <member name="T:PdfFileWriter.TextRendering">
            <summary>
            Text rendering enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextRendering.Fill">
            <summary>
            Fill
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextRendering.Stroke">
            <summary>
            Stroke
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextRendering.FillStroke">
            <summary>
            Fill and stroke
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextRendering.Invisible">
            <summary>
            Invisible
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextRendering.FillClip">
            <summary>
            Fill and clip
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextRendering.StrokeClip">
            <summary>
            Stroke and clip
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextRendering.FillStrokeClip">
            <summary>
            Fill, stroke and clip
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextRendering.Clip">
            <summary>
            Clip
            </summary>
        </member>
        <member name="T:PdfFileWriter.TextJustify">
            <summary>
            Text justify enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextJustify.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextJustify.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextJustify.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="T:PdfFileWriter.TextBoxJustify">
            <summary>
            TextBox justify enumeration
            </summary>
            <remarks>The first three must be the same as TextJustify
            </remarks>
        </member>
        <member name="F:PdfFileWriter.TextBoxJustify.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextBoxJustify.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextBoxJustify.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:PdfFileWriter.TextBoxJustify.FitToWidth">
            <summary>
            Fit to width
            </summary>
        </member>
        <member name="T:PdfFileWriter.BarcodeJustify">
            <summary>
            Barcode justify enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.BarcodeJustify.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:PdfFileWriter.BarcodeJustify.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:PdfFileWriter.BarcodeJustify.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="T:PdfFileWriter.BezierPointOne">
            <summary>
            Draw Bezier point one control enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.BezierPointOne.Ignore">
            <summary>
            Ignore
            </summary>
        </member>
        <member name="F:PdfFileWriter.BezierPointOne.MoveTo">
            <summary>
            Move to
            </summary>
        </member>
        <member name="F:PdfFileWriter.BezierPointOne.LineTo">
            <summary>
            Line to
            </summary>
        </member>
        <member name="T:PdfFileWriter.BlendMode">
            <summary>
            Blend mode enumeration
            </summary>
            <remarks>See Blend Mode section of the PDF specifications menual.</remarks>
        </member>
        <member name="F:PdfFileWriter.BlendMode.Normal">
            <summary>
            Normal (no blend)
            </summary>
        </member>
        <member name="F:PdfFileWriter.BlendMode.Multiply">
            <summary>
            Multiply
            </summary>
        </member>
        <member name="F:PdfFileWriter.BlendMode.Screen">
            <summary>
            Screen
            </summary>
        </member>
        <member name="F:PdfFileWriter.BlendMode.Overlay">
            <summary>
            Overlay
            </summary>
        </member>
        <member name="F:PdfFileWriter.BlendMode.Darken">
            <summary>
            Darken
            </summary>
        </member>
        <member name="F:PdfFileWriter.BlendMode.Lighten">
            <summary>
            Lighten
            </summary>
        </member>
        <member name="F:PdfFileWriter.BlendMode.ColorDodge">
            <summary>
            Color Dodge
            </summary>
        </member>
        <member name="F:PdfFileWriter.BlendMode.ColorBurn">
            <summary>
            Color burn
            </summary>
        </member>
        <member name="F:PdfFileWriter.BlendMode.HardLight">
            <summary>
            Hard light
            </summary>
        </member>
        <member name="F:PdfFileWriter.BlendMode.SoftLight">
            <summary>
            Soft light
            </summary>
        </member>
        <member name="F:PdfFileWriter.BlendMode.Difference">
            <summary>
            Difference
            </summary>
        </member>
        <member name="F:PdfFileWriter.BlendMode.Exclusion">
            <summary>
            Exclusion
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfContents">
            <summary>
            PDF contents class
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfContents.#ctor(PdfFileWriter.PdfPage)">
            <summary>
            PdfContents constructor for page contents
            </summary>
            <param name="Page">Page parent</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.#ctor(PdfFileWriter.PdfDocument)">
            <summary>
            PdfContents constructor unattached
            </summary>
            <param name="Document">Current PdfDocument</param>
            <remarks>
            This contents object must be explicitly attached to a page object
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SaveGraphicsState">
            <summary>
            Save graphics state
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfContents.RestoreGraphicsState">
            <summary>
            Restore graphics state
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetPaintOp(PdfFileWriter.PaintOp)">
            <summary>
            Set paint operator
            </summary>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetLineWidth(System.Double)">
            <summary>
            Set line width
            </summary>
            <param name="Width">Line width</param>
            <remarks>
            Set line width for future path operations
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetLineCap(PdfFileWriter.PdfLineCap)">
            <summary>
            Set line cap
            </summary>
            <param name="LineCap">Line cap enumeration</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetLineJoin(PdfFileWriter.PdfLineJoin)">
            <summary>
            Set line join
            </summary>
            <param name="LineJoin">Set line join enumeration</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetMiterLimit(System.Double)">
            <summary>
            Set miter limit
            </summary>
            <param name="MiterLimit">Miter limit</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetDashLine(System.Double[],System.Double)">
            <summary>
            Set dash line pattern
            </summary>
            <param name="DashArray">Dash array</param>
            <param name="DashPhase">Dash phase</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetColorNonStroking(System.Drawing.Color)">
            <summary>
            Set color for non stroking (fill or brush) operations
            </summary>
            <param name="Color">Color</param>
            <remarks>Set red, green and blue components. Alpha is ignored</remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetColorStroking(System.Drawing.Color)">
            <summary>
            Set color for stroking (outline or pen) operations
            </summary>
            <param name="Color">Color</param>
            <remarks>Set red, green and blue components. Alpha is ignored</remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetAlphaStroking(System.Double)">
            <summary>
            Set opacity value for stroking operations
            </summary>
            <param name="Alpha">Opacity value 0.0=transparent to 1.0=Opaque</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetAlphaNonStroking(System.Double)">
            <summary>
            Set opacity value for non-stroking operations
            </summary>
            <param name="Alpha">Opacity value 0.0=transparent to 1.0=Opaque</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetBlendMode(PdfFileWriter.BlendMode)">
            <summary>
            Set color blend mode
            </summary>
            <param name="Blend">Blend method enumeration</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetPatternNonStroking(PdfFileWriter.PdfTilingPattern)">
            <summary>
            Set pattern for non stroking (fill) operations
            </summary>
            <param name="Pattern">Pattern resource</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawShading(PdfFileWriter.PdfAxialShading)">
            <summary>
            Draw axial shading pattern
            </summary>
            <param name="Shading">Axial shading resource</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawShading(PdfFileWriter.PdfRadialShading)">
            <summary>
            Draw radial shading pattern
            </summary>
            <param name="Shading">Radial shading resource</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.BeginMarkedContent(System.String)">
            <summary>
            Begin marked content
            </summary>
            <param name="Tag">Tag (must start with /)</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.BeginMarkedContent(System.String,PdfFileWriter.PdfObject)">
            <summary>
            Begin marked content with resources
            </summary>
            <param name="Tag">Tag (must start with /)</param>
            <param name="Resource">Resource</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.EndMarkedContent">
            <summary>
            End marked content (Layer end)
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfContents.LayerStart(PdfFileWriter.PdfLayer)">
            <summary>
            Layer start
            </summary>
            <param name="Layer">Layer object</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.LayerEnd">
            <summary>
            End marked content (Layer end)
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetTransMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set current transformation matrix
            </summary>
            <param name="a">A</param>
            <param name="b">B</param>
            <param name="c">C</param>
            <param name="d">D</param>
            <param name="e">E</param>
            <param name="f">F</param>
            <remarks>
            Xpage = a * Xuser + c * Yuser + e
            Ypage = b * Xuser + d * Yuser + f
            </remarks>	
        </member>
        <member name="M:PdfFileWriter.PdfContents.Translate(PdfFileWriter.PointD)">
            <summary>
            Translate origin
            </summary>
            <param name="Orig">New origin</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.Translate(System.Double,System.Double)">
            <summary>
            Translate origin
            </summary>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.Scale(System.Double)">
            <summary>
            Scale
            </summary>
            <param name="Scale">New scale</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.TranslateScale(PdfFileWriter.PointD,System.Double)">
            <summary>
            Translate and scale
            </summary>
            <param name="Orig">Origin point</param>
            <param name="Scale">Scale</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.TranslateScale(System.Double,System.Double,System.Double)">
            <summary>
            Translate and scale
            </summary>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <param name="Scale">Scale</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.TranslateScale(PdfFileWriter.PointD,System.Double,System.Double)">
            <summary>
            Translate and scale
            </summary>
            <param name="Orig">Origin point</param>
            <param name="ScaleX">Horizontal scale</param>
            <param name="ScaleY">Vertical scale</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.TranslateScale(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Translate and scale
            </summary>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <param name="ScaleX">Horizontal scale</param>
            <param name="ScaleY">Vertical scale</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.TranslateScaleRotate(PdfFileWriter.PointD,System.Double,System.Double)">
            <summary>
            Translate, scale and rotate
            </summary>
            <param name="Orig">Origin point</param>
            <param name="Scale">Scale</param>
            <param name="Rotate">Rotate (radians)</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.TranslateScaleRotate(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Translate, scale and rotate
            </summary>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <param name="Scale">Scale</param>
            <param name="Rotate">Rotate (radians)</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.TranslateScaleRotate(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Translate, scale and rotate
            </summary>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <param name="ScaleX">Horizontal scale</param>
            <param name="ScaleY">Vertical scale</param>
            <param name="Rotate">Rotate (radians)</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.MoveTo(PdfFileWriter.PointD)">
            <summary>
            Move current pointer to new position
            </summary>
            <param name="Point">New point</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.LineTo(PdfFileWriter.PointD)">
            <summary>
            Draw line from last position to new position
            </summary>
            <param name="Point">New point</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawLine(PdfFileWriter.LineD)">
            <summary>
            Draw line
            </summary>
            <param name="Line">Line object</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawLine(PdfFileWriter.LineD,System.Double)">
            <summary>
            Draw line with given line width
            </summary>
            <param name="Line">Line</param>
            <param name="LineWidth">Line width</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawLine(PdfFileWriter.LineD,System.Double,System.Drawing.Color)">
            <summary>
            Draw line with given line width
            </summary>
            <param name="Line">Line</param>
            <param name="LineWidth">Line width</param>
            <param name="LineColor">Line color</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawBezier(PdfFileWriter.BezierD,PdfFileWriter.BezierPointOne)">
            <summary>
            Draw Bezier cubic path
            </summary>
            <param name="Bezier">Bezier object</param>
            <param name="Point1Action">Point1 action</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawBezier(PdfFileWriter.PointD,PdfFileWriter.PointD,PdfFileWriter.PointD)">
            <summary>
            Draw Bezier cubic path
            </summary>
            <param name="P1">Point 1</param>
            <param name="P2">Point 2</param>
            <param name="P3">Point 3</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawBezierP2andP3(PdfFileWriter.PointD,PdfFileWriter.PointD)">
            <summary>
            Draw Bezier cubic path (P1 is the same as current point)
            </summary>
            <param name="P2">Point 2</param>
            <param name="P3">Point 3</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawBezierP1andP3(PdfFileWriter.PointD,PdfFileWriter.PointD)">
            <summary>
            Draw Bezier cubic path (P2 is the same as P3)
            </summary>
            <param name="P1">Point 1</param>
            <param name="P3">Point 3</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.BeginTextMode">
            <summary>
            Begin text mode
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfContents.EndTextMode">
            <summary>
            End text mode
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetFontAndSize(PdfFileWriter.PdfFontTypeOne,System.Double)">
            <summary>
            Set font resource and font size
            </summary>
            <param name="TypeOneFont">Type one font</param>
            <param name="FontSize">Font size in points</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetTextPosition(System.Double,System.Double)">
            <summary>
            Set text position
            </summary>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetTextRenderingMode(PdfFileWriter.TextRendering)">
            <summary>
            Set text rendering mode
            </summary>
            <param name="TR">Text rendering mode enumeration</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetCharacterSpacing(System.Double)">
            <summary>
            Set character extra spacing
            </summary>
            <param name="ExtraSpacing">Character extra spacing</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.SetWordSpacing(System.Double)">
            <summary>
            Set word extra spacing
            </summary>
            <param name="Spacing">Word extra spacing</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawPolygon(System.Drawing.PointF[],PdfFileWriter.PaintOp)">
            <summary>
            Draw polygon
            </summary>
            <param name="PathArray">Path array (min 2 points)</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawPolygon(System.Single[],PdfFileWriter.PaintOp)">
            <summary>
            Draw polygon
            </summary>
            <param name="PathArray">Path array of X and Y values (min 4 and even)</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawRegularPolygon(System.Double,System.Double,System.Double,System.Double,System.Int32,PdfFileWriter.PaintOp)">
            <summary>
            Draw regular polygon
            </summary>
            <param name="CenterX">Center X</param>
            <param name="CenterY">Center Y</param>
            <param name="Radius">Radius</param>
            <param name="Alpha">Initial angle</param>
            <param name="Sides">Number of sides</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawRegularPolygon(PdfFileWriter.PointD,System.Double,System.Double,System.Int32,PdfFileWriter.PaintOp)">
            <summary>
            Draw regular polygon
            </summary>
            <param name="Center">Center position</param>
            <param name="Radius">Radius</param>
            <param name="Alpha">Initial angle</param>
            <param name="Sides">Number of sides</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawArc(PdfFileWriter.PointD,PdfFileWriter.PointD,PdfFileWriter.SizeD,System.Double,PdfFileWriter.ArcType,PdfFileWriter.BezierPointOne)">
            <summary>
            Draw arc
            </summary>
            <param name="ArcStart">Arc start point</param>
            <param name="ArcEnd">Arc end point</param>
            <param name="Radius">RadiusX as width and RadiusY as height</param>
            <param name="Rotate">X axis rotation angle in radians</param>
            <param name="Type">Arc type enumeration</param>
            <param name="OutputStartPoint">Output start point</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawHeart(PdfFileWriter.LineD,PdfFileWriter.PaintOp)">
            <summary>
            Draw heart
            </summary>
            <param name="CenterLine">Center line</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawDoubleBezierPath(PdfFileWriter.LineD,System.Double,System.Double,System.Double,System.Double,PdfFileWriter.PaintOp)">
            <summary>
            Draw double Bezier path
            </summary>
            <param name="CenterLine">Center line</param>
            <param name="Factor1">Factor 1</param>
            <param name="Alpha1">Alpha 1</param>
            <param name="Factor2">Factor 2</param>
            <param name="Alpha2">Alpha 2</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawStar(System.Double,System.Double,System.Double,System.Double,System.Int32,PdfFileWriter.PaintOp)">
            <summary>
            Draw star
            </summary>
            <param name="CenterX">Center X</param>
            <param name="CenterY">Center Y</param>
            <param name="Radius">Radius</param>
            <param name="Alpha">Initial angle</param>
            <param name="Sides">Number of sides</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawStar(PdfFileWriter.PointD,System.Double,System.Double,System.Int32,PdfFileWriter.PaintOp)">
            <summary>
            Draw star
            </summary>
            <param name="Center">Center position</param>
            <param name="Radius">Radius</param>
            <param name="Alpha">Initial angle</param>
            <param name="Sides">Number of sides</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawStar(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,PdfFileWriter.PaintOp)">
            <summary>
            Draw star
            </summary>
            <param name="CenterX">Center X</param>
            <param name="CenterY">Center Y</param>
            <param name="Radius1">Radius 1</param>
            <param name="Radius2">Radius 2</param>
            <param name="Alpha">Initial angle</param>
            <param name="Sides">Number of sides</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawStar(PdfFileWriter.PointD,System.Double,System.Double,System.Double,System.Int32,PdfFileWriter.PaintOp)">
            <summary>
            Draw star
            </summary>
            <param name="Center">Center point</param>
            <param name="Radius1">Radius 1</param>
            <param name="Radius2">Radius 2</param>
            <param name="Alpha">Initial angle</param>
            <param name="Sides">Number of sides</param>
            <param name="PP">Paint operator</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawGraphics(PdfFileWriter.PdfDrawCtrl,PdfFileWriter.PdfRectangle)">
            <summary>
            Draw graphics: rectangle, rounded rectangle, oval
            </summary>
            <param name="Rect">PDF Rectangle</param>
            <param name="DrawCtrl">Draw rectangle control</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.ClipGraphics(PdfFileWriter.PdfRectangle,PdfFileWriter.PdfDrawCtrl)">
            <summary>
            Clip closed shape
            </summary>
            <param name="Rect">Rectangle</param>
            <param name="DrawCtrl">Draw control</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawSymbol(PdfFileWriter.PdfSymbol,PdfFileWriter.PdfRectangle,System.Drawing.Color)">
            <summary>
            Draw one character as a symbol
            </summary>
            <param name="Symbol">Symbol class</param>
            <param name="Rect">Drawing rectangle</param>
            <param name="FillColor">Fill or non stroking color</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawText(PdfFileWriter.PdfDrawTextCtrl,System.Double,System.Double,System.String)">
            <summary>
            Draw one line of text
            </summary>
            <param name="TextCtrl">PDF draw text control</param>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="Text">Text</param>
            <returns>Text width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawTextWithKerning(PdfFileWriter.PdfDrawTextCtrl,System.Double,System.Double,System.String)">
            <summary>
            Draw text with kerning
            </summary>
            <param name="TextCtrl">PDF draw text control</param>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="Text">Text</param>
            <returns>Text width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawTextWithKerning(PdfFileWriter.PdfDrawTextCtrl,System.Double,System.Double,PdfFileWriter.PdfKerningAdjust[])">
            <summary>
            Draw text with kerning array
            </summary>
            <param name="TextCtrl">PDF draw text control</param>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="KerningArray">Kerning array</param>
            <returns>Text width</returns>
            <remarks>
            Each kerning item consists of text and position adjustment.
            The adjustment is a negative number.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawText(PdfFileWriter.PdfDrawTextCtrl,System.Double,System.Double,System.Double,System.Drawing.Color,System.String)">
            <summary>
            Draw text with special effects
            </summary>
            <param name="TextCtrl">Pdf draw text control</param>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="OutlineWidth">Outline width</param>
            <param name="OutlineColor">Stoking (outline) color</param>
            <param name="Text">Text</param>
            <returns>Text width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfContents.ClipText(PdfFileWriter.PdfDrawTextCtrl,System.Double,System.Double,System.String)">
            <summary>
            Clip text exposing area underneath
            </summary>
            <param name="TextCtrl">PDF draw text control</param>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="Text">Text</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawText(System.Double,System.Double@,System.Double,System.Int32,PdfFileWriter.PdfTextBox,PdfFileWriter.PdfPage)">
            <summary>
            Draw TextBox
            </summary>
            <param name="PosX">Position X</param>
            <param name="PosYTop">Position Y (by reference)</param>
            <param name="PosYBottom">Position Y bottom</param>
            <param name="LineNo">Start at line number</param>
            <param name="TextBox">TextBox</param>
            <param name="Page">Page if TextBox contains web link segment</param>
            <returns>Next line number</returns>
            <remarks>
            Before calling this method you must add text to a TextBox object.
            <para>
            Set the PosX and PosYTop to the left top corner of the text area.
            Note PosYTop is by reference. This variable will be updated to
            the next vertical line position after the method was executed.
            </para>
            <para>
            Set the PosYBottom to the bottom of your page. The method will
            not print below this value.
            </para>
            <para>
            Set the LineNo to the first line to be printed. Initially 
            this will be zero. After the method returns, PosYTop is set 
            to next print line on the page and LineNo is set to next line 
            within the box.
            </para>
            <para>
            If LineNo is equals to TextBox.LineCount the box was fully printed. 
            </para>
            <para>
            If LineNo is less than TextBox.LineCount box printing was not
            done. Start a new PdfPage and associated PdfContents. Set 
            PosYTop to desired start position. Set LineNo to the value
            returned by this method, and call the method again.
            </para>
            <para>
            If your TextBox contains WebLink segment you must supply
            Page argument and position X and Y must be relative to
            page bottom left corner.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawText(System.Double,System.Double@,System.Double,System.Int32,System.Double,System.Double,PdfFileWriter.TextBoxJustify,PdfFileWriter.PdfTextBox,PdfFileWriter.PdfPage)">
            <summary>
            Draw TextBox
            </summary>
            <param name="PosX">Position X</param>
            <param name="PosYTop">Position Y (by reference)</param>
            <param name="PosYBottom">Position Y bottom</param>
            <param name="LineNo">Start at line number</param>
            <param name="LineExtraSpace">Extra line spacing</param>
            <param name="ParagraphExtraSpace">Extra paragraph spacing</param>
            <param name="Justify">TextBox justify enumeration</param>
            <param name="TextBox">TextBox</param>
            <param name="Page">Page if TextBox contains web link segment</param>
            <returns>Next line number</returns>
            <remarks>
            Before calling this method you must add text to a TextBox object.
            <para>
            Set the PosX and PosYTop to the left top corner of the text area.
            Note PosYTop is by reference. This variable will be updated to
            the next vertical line position after the method was executed.
            </para>
            <para>
            Set the PosYBottom to the bottom of your page. The method will
            not print below this value.
            </para>
            <para>
            Set the LineNo to the first line to be printed. Initially 
            this will be zero. After the method returns, PosYTop is set 
            to next print line on the page and LineNo is set to next line 
            within the box.
            </para>
            <para>
            If LineNo is equals to TextBox.LineCount the box was fully printed. 
            </para>
            <para>
            If LineNo is less than TextBox.LineCount box printing was not
            done. Start a new PdfPage and associated PdfContents. Set 
            PosYTop to desired start position. Set LineNo to the value
            returned by this method, and call the method again.
            </para>
            <para>
            If your TextBox contains WebLink segment you must supply
            Page argument and position X and Y must be relative to
            page bottom left corner.
            </para>
            <para>
            TextBoxJustify controls horizontal justification. FitToWidth
            will display a straight right edge.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawBarcode(PdfFileWriter.PdfDrawBarcodeCtrl,System.Double,System.Double,PdfFileWriter.PdfBarcode)">
            <summary>
            Draw barcode
            </summary>
            <param name="BarcodeCtrl">Barcode draw control</param>
            <param name="PosX">Position X</param>
            <param name="PosY">Position Y</param>
            <param name="Barcode">Derived barcode class</param>
            <returns>Barcode width</returns>
            <remarks>
            <para>
            PosX can be the left, centre or right side of the barcode.
            The Justify argument controls the meaning of PosX.
            PosY is the position of the bottom side of the barcode. 
            If optional text is displayed it will be
            displayed below PosY. If optional text is wider than the
            barcode it will be extended to the left and right sides
            of the barcode.
            </para>
            <para>
            The BarWidth argument is the width of the narrow bar.
            </para>
            <para>
            The BarcodeHeight argument is the height of the barcode 
            excluding optional text.
            </para>
            <para>
            Set Barcode to one of the derived classes. 
            This library supports: Barcode128, Barcode39 and BarcodeEAN13.
            Note BarcodeEAN13 supports Barcode UPC-A.
            </para>
            <para>
            Barcode text is optional. If TextFont and FontSize are omitted 
            no text will be drawn under the barcode. If TextFont and
            FontSize are specified the barcode text will be displayed
            under the barcode. It will be horizontally centered in relation
            to the barcode.
            </para>
            <para>
            Barcode text is displayed below PosY. Make sure to leave
            space under the barcode.
            </para>
            <para>
            If color other than black is given make sure there is
            a good contrast to white.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawImage(PdfFileWriter.PdfImage,System.Double,System.Double,System.Double)">
            <summary>
            Draw image (Height is calculated from width as per aspect ratio)
            </summary>
            <param name="Image">PdfImage resource</param>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <param name="Width">Display width</param>
            <remarks>
            The chart will be stretched or shrunk to fit the display width
            and display height. Use PdfImage.ImageSize(...) or 
            PdfImage.ImageSizePosition(...) to ensure correct aspect ratio 
            and positioning.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawImage(PdfFileWriter.PdfImage,PdfFileWriter.PdfRectangle)">
            <summary>
            Draw image
            </summary>
            <param name="Image">PdfImage resource</param>
            <param name="ImageRect">Image display rectangle</param>
            <remarks>
            The chart will be stretched or shrunk to fit the display width
            and display height. Use PdfImage.ImageSize(...) or 
            PdfImage.ImageSizePosition(...) to ensure correct aspect ratio 
            and positioning.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawXObject(PdfFileWriter.PdfXObject)">
            <summary>
            Draw X Object
            </summary>
            <param name="XObject">X Object resource</param>
            <remarks>
            X object is displayed at current position. X object Size
            is as per X object.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawXObject(PdfFileWriter.PdfXObject,System.Double,System.Double)">
            <summary>
            Draw X Object
            </summary>
            <param name="XObject">X Object resource</param>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <remarks>
            X object Size is as per X object.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawXObject(PdfFileWriter.PdfXObject,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw X Object
            </summary>
            <param name="XObject">X Object resource</param>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <param name="ScaleX">Horizontal scale factor</param>
            <param name="ScaleY">Vertical scale factor</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.DrawXObject(PdfFileWriter.PdfXObject,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw X Object
            </summary>
            <param name="XObject">X Object resource</param>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <param name="ScaleX">Horizontal scale factor</param>
            <param name="ScaleY">Vertical scale factor</param>
            <param name="Alpha">Rotation angle</param>
        </member>
        <member name="M:PdfFileWriter.PdfContents.ReverseString(System.String)">
            <summary>
            Reverse characters in a string
            </summary>
            <param name="Text">Input string</param>
            <returns>Output string</returns>
        </member>
        <member name="M:PdfFileWriter.PdfContents.MakeDarker(System.Drawing.Color,System.Double)">
            <summary>
            Make a color darker
            </summary>
            <param name="BaseColor">Base color</param>
            <param name="Factor">Factor 0 to 1</param>
            <returns>Darker color</returns>
        </member>
        <member name="M:PdfFileWriter.PdfContents.CommitToPdfFile(System.Boolean)">
            <summary>
            Commit object to PDF file
            </summary>
            <param name="GCCollect">Activate Garbage Collector</param>
        </member>
        <member name="T:PdfFileWriter.PdfDictionary">
            <summary>
            PDF dictionary class
            </summary>
            <remarks>
            <para>
            Dictionary key value pair class. Holds one key value pair.
            </para>
            </remarks>
        </member>
        <member name="T:PdfFileWriter.UnitOfMeasure">
            <summary>
            Unit of measure enumeration
            </summary>
            <remarks>
            User unit of measure enumeration.
            </remarks>
        </member>
        <member name="F:PdfFileWriter.UnitOfMeasure.Point">
            <summary>
            Point
            </summary>
        </member>
        <member name="F:PdfFileWriter.UnitOfMeasure.Inch">
            <summary>
            Inch
            </summary>
        </member>
        <member name="F:PdfFileWriter.UnitOfMeasure.cm">
            <summary>
            CM
            </summary>
        </member>
        <member name="F:PdfFileWriter.UnitOfMeasure.mm">
            <summary>
            MM
            </summary>
        </member>
        <member name="F:PdfFileWriter.UnitOfMeasure.m">
            <summary>
            Meter
            </summary>
        </member>
        <member name="T:PdfFileWriter.PaperType">
            <summary>
            Standard paper size enumeration 
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaperType.Letter">
            <summary>
            Letter
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaperType.Legal">
            <summary>
            Legal
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaperType.A3">
            <summary>
            A3
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaperType.A4">
            <summary>
            A4
            </summary>
        </member>
        <member name="F:PdfFileWriter.PaperType.A5">
            <summary>
            A5
            </summary>
        </member>
        <member name="T:PdfFileWriter.InitialDocDisplay">
            <summary>
            Initial document display enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.InitialDocDisplay.UseNone">
            <summary>
            Take no action
            </summary>
        </member>
        <member name="F:PdfFileWriter.InitialDocDisplay.UseBookmarks">
            <summary>
            Display bookmarks panel
            </summary>
        </member>
        <member name="F:PdfFileWriter.InitialDocDisplay.UseThumbs">
            <summary>
            Display thumbnail panel
            </summary>
        </member>
        <member name="F:PdfFileWriter.InitialDocDisplay.FullScreen">
            <summary>
            Full screen
            </summary>
        </member>
        <member name="F:PdfFileWriter.InitialDocDisplay.UseLayers">
            <summary>
            Display layers panel
            </summary>
        </member>
        <member name="F:PdfFileWriter.InitialDocDisplay.UseAttachments">
            <summary>
            Display attachment panel
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfDocument">
            <summary>
            PDF document class
            </summary>
            <remarks>
            <para>
            The main class for controlling the production of the PDF document.
            </para>
            <para>
            Creating a PDF is a six steps process.
            </para>
            <para>
            Step 1: Create one document object - PdfDocument class.
            </para>
            <para>
            Step 2: Create resource objects such as fonts or images (i.e. PdfFont or PdfImage).
            </para>
            <para>
            Step 3: Create page object PdfPage.
            </para>
            <para>
            Step 4: Create contents object PdfContents.
            </para>
            <para>
            Step 5: Add text and graphics to the contents object (using PdfContents methods).
            </para>
            <para>
            Repeat steps 3, 4 and 5 for additional pages
            </para>
            <para>
            Step 6: Create your PDF document file by calling CreateFile method of PdfDocument.
            </para>
            <para>
            <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#DocumentCreation">For example of document creation see 3.1. Document Creation Overview</a>
            </para>
            </remarks>
        </member>
        <member name="F:PdfFileWriter.PdfDocument.RevisionNumber">
            <summary>
            Library revision number
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfDocument.RevisionDate">
            <summary>
            Library revision date
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDocument.ScaleFactor">
            <summary>
            Scale factor
            </summary>
            <remarks>
            From user unit of measure to points.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfDocument.Epsilon">
            <summary>
            Epsilon 1/300 of an inch in user units
            </summary>
            <remarks>
            Small distance for compare calculation to eliminate rounding errors.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfDocument.InitialDocDisplay">
            <summary>
            Initial document display
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDocument.PageCount">
            <summary>
            Page count
            </summary>
            <remarks>
            Current page count
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.GetPage(System.Int32)">
            <summary>
            Get page object
            </summary>
            <param name="Index">Page index (zero based)</param>
            <returns>PdfPage object</returns>
        </member>
        <member name="F:PdfFileWriter.PdfDocument.Debug">
            <summary>
            Debug flag
            </summary>
            <remarks>
            Debug flag. Default is false. The program will generate normal PDF file.
            If debug flag is true, the library will not compress contents, will replace images and font file with text place holder.
            The generated file can be viewed with a text editor but cannot be loaded into PDF reader.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.#ctor(System.String)">
            <summary>
            PDF document constructor.
            </summary>
            <param name="FileName">Document file name.</param>
            <remarks>
            <para>This constructor generates a document with default letter size
            page (height 11”, width 8.5”).</para>
            <para>Page orientation is portrait.</para>
            <para>Unit of measure is points (1/72 inch).</para>
            <para>Scale factor is 1.0.</para>
            <para>The PDF document will be saved in a file named FileName.</para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.#ctor(System.IO.Stream)">
            <summary>
            PDF document constructor.
            </summary>
            <param name="Stream">File or memory stream.</param>
            <remarks>
            <para>This constructor generates a document with default letter size
            page (height 11”, width 8.5”).</para>
            <para>Page orientation is portrait.</para>
            <para>Unit of measure is points (1/72 inch).</para>
            <para>Scale factor is 1.0.</para>
            <para>The PDF document will be saved in the stream argument. The stream can 
            be either a MemoryStream or a FileStream. It is the calling program
            responsibiliy to close the stream after CreateFile() method
            is called.</para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.#ctor(System.Double,System.Double,System.Double,System.String)">
            <summary>
            PDF document constructor.
            </summary>
            <param name="Width">Page Width</param>
            <param name="Height">Page height</param>
            <param name="ScaleFactor">Scale factor</param>
            <param name="FileName">Document file name.</param>
            <remarks>
            <para>This constructor generates a document with default page size
            as per width and height arguments in user units.</para>
            <para>Page orientation is portrait if width is less than height.
            Otherwise it is landscape.</para>
            <para>Scale factor is user unit of measure expressed in points.
            For example, Inch has scale factor of 72.0.</para>
            <para>The PDF document will be saved in a file named FileName.</para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.#ctor(System.Double,System.Double,System.Double,System.IO.Stream)">
            <summary>
            PDF document constructor.
            </summary>
            <param name="Width">Page Width</param>
            <param name="Height">Page height</param>
            <param name="ScaleFactor">Scale factor</param>
            <param name="Stream">File or memory stream.</param>
            <remarks>
            <para>This constructor generates a document with default page size
            as per width and height arguments in user units.</para>
            <para>Page orientation is portrait if width is less than height.
            Otherwise it is landscape.</para>
            <para>Scale factor is user unit of measure expressed in points.
            For example, Inch has scale factor of 72.0.</para>
            <para>The PDF document will be saved in the stream argument. The stream can 
            be either a MemoryStream or a FileStream. It is the calling program
            responsibiliy to close the stream after CreateFile() method
            is called.</para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.#ctor(System.Double,System.Double,PdfFileWriter.UnitOfMeasure,System.String)">
            <summary>
            PDF document constructor
            </summary>
            <param name="Width">Page width.</param>
            <param name="Height">Page height.</param>
            <param name="UnitOfMeasure">Unit of measure code.</param>
            <param name="FileName">Document file name.</param>
            <remarks>
            <para>This constructor generates a document with default page size
            as per width and height arguments in user units.</para>
            <para>Page orientation is portrait if width is less than height.
            Otherwise it is landscape.</para>
            <para>Unit of measure is a an enumeration constant (Point, Inch, cm, mm, m)</para>
            <para>The PDF document will be saved in a file named FileName.</para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.#ctor(System.Double,System.Double,PdfFileWriter.UnitOfMeasure,System.IO.Stream)">
            <summary>
            PDF document constructor
            </summary>
            <param name="Width">Page width.</param>
            <param name="Height">Page height.</param>
            <param name="UnitOfMeasure">Unit of measure code.</param>
            <param name="Stream">File or memory stream.</param>
            <remarks>
            <para>This constructor generates a document with default page size
            as per width and height arguments in user units.</para>
            <para>Page orientation is portrait if width is less than height.
            Otherwise it is landscape.</para>
            <para>Unit of measure is a an enumeration constant (Point, Inch, cm, mm, m)</para>
            <para>The PDF document will be saved in the stream argument. The stream can 
            be either a MemoryStream or a FileStream. It is the calling program
            responsibiliy to close the stream after CreateFile() method
            is called.</para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.#ctor(PdfFileWriter.PaperType,System.Boolean,PdfFileWriter.UnitOfMeasure,System.String)">
            <summary>
            PDF document constructor
            </summary>
            <param name="PaperType">Paper type</param>
            <param name="Landscape">True for landscape, false for portrait.</param>
            <param name="UnitOfMeasure">Unit of measure code.</param>
            <param name="FileName">Document file name.</param>
            <remarks>
            <para>This constructor generates a document with default page size
            of Letter, Leagal, A3, A4 or A5.</para>
            <para>Page orientation is determined by the landscape argument.</para>
            <para>Unit of measure is a an enumeration constant (Point, Inch, cm, mm, m)</para>
            <para>The PDF document will be saved in a file named FileName.</para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.#ctor(PdfFileWriter.PaperType,System.Boolean,PdfFileWriter.UnitOfMeasure,System.IO.Stream)">
            <summary>
            PDF document constructor
            </summary>
            <param name="PaperType">Paper type</param>
            <param name="Landscape">True for landscape, false for portrait.</param>
            <param name="UnitOfMeasure">Unit of measure code.</param>
            <param name="Stream">File or memory stream.</param>
            <remarks>
            <para>This constructor generates a document with default page size
            of Letter, Leagal, A3, A4 or A5.</para>
            <para>Page orientation is determined by the landscape argument.</para>
            <para>Unit of measure is a an enumeration constant (Point, Inch, cm, mm, m)</para>
            <para>The PDF document will be saved in the stream argument. The stream can 
            be either a MemoryStream or a FileStream. It is the calling program
            responsibiliy to close the stream after CreateFile() method
            is called.</para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.SetEncryption">
            <summary>
            Set encryption
            </summary>
            <remarks>
            The PDF File Writer library will encrypt the PDF document
            using AES-128 encryption. User password set to default. Owner 
            password is set to a random number.
            A PDF reader such as Acrobat will open the document with the 
            default user password. Permissions flags are set to allow all.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.SetEncryption(PdfFileWriter.Permission)">
            <summary>
            Set encryption
            </summary>
            <param name="Permissions">Permission flags.</param>
            <remarks>
            The PDF File Writer library will encrypt the PDF document
            using AES-128 encryption. User password set to default. Owner 
            password is set to a random number.
            A PDF reader such as Acrobat will open the document with the 
            default user password. Permissions flags are set as per argument.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.SetEncryption(System.String,PdfFileWriter.Permission)">
            <summary>
            Set encryption
            </summary>
            <param name="UserPassword">User password</param>
            <param name="Permissions">Permission flags</param>
            <remarks>
            The PDF File Writer library will encrypt the PDF document
            using AES-128 encryption. User password is as per argument. Owner 
            password is set to a random number.
            A PDF reader such as Acrobat will request the user to enter a password.
            The document can only be opened with the user password. The owner password
            being random is effectively unknown.
            Permissions flags are set as per argument.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.SetEncryption(System.String,System.String,PdfFileWriter.Permission,PdfFileWriter.EncryptionType)">
            <summary>
            Set encryption
            </summary>
            <param name="UserPassword">User password</param>
            <param name="OwnerPassword">Owner password</param>
            <param name="Permissions">Permission flags</param>
            <param name="EncryptionType">Encryption type</param>
            <remarks>
            The PDF File Writer library will encrypt the PDF document
            using either AES-128 encryption or standard 128 (RC4) encryption.
            Encryption type is specified by the last argument. Note: the 
            standard 128 (RC4) is considered unsafe and should not be used.
            User and owner passwords are as per
            the two arguments. A PDF reader such as Acrobat will request the 
            user to enter a password. The user can supply either the user
            or the owner password. Permissions flags are set as per argument.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.GetBookmarksRoot">
            <summary>
            Gets bookmarks root
            </summary>
            <returns>Root bookmark object</returns>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.MovePage(System.Int32,System.Int32)">
            <summary>
            Move page to another position
            </summary>
            <param name="SourceIndex">Page's current position</param>
            <param name="DestinationIndex">Page's new position</param>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.CreateFile">
            <summary>
            Create PDF document file
            </summary>
            <remarks>
            <para>The last step of document creation after all pages were constructed.</para>
            <para>If PdfDocument was constructed with a file name,
            the CreateFile method will close the file after the file is
            written to. If the PdfDocument was constructed with a stream,
            the CreateFile does not close the stream. It is the user application
            that should close the stream after the stream was used.</para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.AddLocationMarker(System.String,PdfFileWriter.PdfPage,PdfFileWriter.LocMarkerScope,PdfFileWriter.DestFit,System.Double[])">
            <summary>
            Create unique location marker
            </summary>
            <param name="LocMarkerName">Location marker name (case sensitive)</param>
            <param name="LocMarkerPage">Location marker page</param>
            <param name="Scope">Location marker scope</param>
            <param name="FitArg">Fit enumeration</param>
            <param name="SideArg">Fit optional arguments</param>
        </member>
        <member name="M:PdfFileWriter.PdfDocument.Dispose">
            <summary>
            Dispose PDF document object
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfDrawBarcodeCtrl">
            <summary>
            Draw barcode control class
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfDrawBarcodeCtrl.NarrowBarWidth">
            <summary>
            Narrow bar width
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfDrawBarcodeCtrl.Height">
            <summary>
            Bar code height
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfDrawBarcodeCtrl.Justify">
            <summary>
            Bar code justify (left, center, right)
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfDrawBarcodeCtrl.Color">
            <summary>
            Bar code color.
            The default is black and it is recommended to keep it black
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfDrawBarcodeCtrl.TextCtrl">
            <summary>
            Bar code value draw text control
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfDrawBarcodeCtrl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfDrawBarcodeCtrl.#ctor(PdfFileWriter.PdfDrawBarcodeCtrl)">
            <summary>
            Copy constructor
            </summary>
            <param name="Other">Bar code control to duplicate</param>
        </member>
        <member name="T:PdfFileWriter.DrawShape">
            <summary>
            Shape enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.DrawShape.Rectangle">
            <summary>
            Rectangle
            </summary>
        </member>
        <member name="F:PdfFileWriter.DrawShape.RoundedRect">
            <summary>
            Rounded rectangle
            </summary>
        </member>
        <member name="F:PdfFileWriter.DrawShape.InvRoundedRect">
            <summary>
            Inverted rounded rectangle
            </summary>
        </member>
        <member name="F:PdfFileWriter.DrawShape.Oval">
            <summary>
            Oval (circle)
            </summary>
        </member>
        <member name="T:PdfFileWriter.DrawPaint">
            <summary>
            Paint control enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.DrawPaint.Border">
            <summary>
            Border only
            </summary>
        </member>
        <member name="F:PdfFileWriter.DrawPaint.Fill">
            <summary>
            Fill and no border
            </summary>
        </member>
        <member name="F:PdfFileWriter.DrawPaint.BorderAndFill">
            <summary>
            Border and fill the area
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfDrawCtrl">
            <summary>
            Draw control class for rectangle, rounded rectangle and oval
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawCtrl.Shape">
            <summary>
            Set shape
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawCtrl.Paint">
            <summary>
            Set paint (border and fill)
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawCtrl.BorderWidth">
            <summary>
            Border line width
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawCtrl.BorderColor">
            <summary>
            Border color
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawCtrl.BorderAlpha">
            <summary>
            Border alpha 
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawCtrl.Radius">
            <summary>
            Rounded rectangle corner radius
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawCtrl.BackgroundTexture">
            <summary>
            Background texture
            Color, tilling pattern, image, axial shading, radial shading
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawCtrl.BackgroundAlpha">
            <summary>
            Background color alpha
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawCtrl.Blend">
            <summary>
            Blend mode
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfDrawCtrl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfDrawCtrl.BorderWidthInPoints(PdfFileWriter.PdfContents,System.Double)">
            <summary>
            Border width in points
            </summary>
            <param name="Contents">PdfContents or XObject</param>
            <param name="Width">Width in points (1/72 of inch)</param>
        </member>
        <member name="T:PdfFileWriter.PdfDrawTextCtrl">
            <summary>
            Draw text control class
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.TextColor">
            <summary>
            Text color
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.DrawStyle">
            <summary>
            Draw style (normal, underline, strikeout, subscript, superscript)
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.Justify">
            <summary>
            Text justify (left, center, right)
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.Annotation">
            <summary>
            Annotation action associated with this text segment
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.Font">
            <summary>
            Get font
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.FontSize">
            <summary>
            Get or set font size in points
            (it will set line spacing, ascent and descent)
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.FontSizeStr">
            <summary>
            Font size as a string
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.FontResourceCode">
            <summary>
            Font resource code and size as a string
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.FontResourceGlyph">
            <summary>
            Font resource code and size as a string
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.LineSpacing">
            <summary>
            Line spacing for selected font and font size
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.TextAscent">
            <summary>
            Text ascent for selected font and font size
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.TextDescent">
            <summary>
            Text descent for selected font and font size
            It is DesignDescent plus ExternalLead
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.TextInternalLead">
            <summary>
            Text internal lead (it is part of TextAscent)
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.TextExternalLead">
            <summary>
            Text external lead (it is part of TextDescent)
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfDrawTextCtrl.#ctor(PdfFileWriter.PdfDocument,System.String,System.Drawing.FontStyle,System.Double)">
            <summary>
            PdfDrawTextCtrl constructor
            </summary>
            <param name="Document">PDF document</param>
            <param name="FontFamilyName">Font family name</param>
            <param name="FontStyle">Font style (normal, bold, italic, bold+italic)</param>
            <param name="FontSize">Font size in points</param>
        </member>
        <member name="M:PdfFileWriter.PdfDrawTextCtrl.#ctor(PdfFileWriter.PdfFont,System.Double)">
            <summary>
            PdfDrawTextCtrl constructor
            </summary>
            <param name="Font">PDF font class</param>
            <param name="FontSize">Font size in points</param>
        </member>
        <member name="M:PdfFileWriter.PdfDrawTextCtrl.#ctor(PdfFileWriter.PdfDrawTextCtrl)">
            <summary>
            PdfDrawTextCtrl copy constructor
            </summary>
            <param name="Other">Existing PdfDrawTextCtrl class</param>
        </member>
        <member name="M:PdfFileWriter.PdfDrawTextCtrl.IsEqual(PdfFileWriter.PdfDrawTextCtrl)">
            <summary>
            Compare two PdfDrawTextCtrl objects
            </summary>
            <param name="Other">Other object</param>
            <returns>Compare result</returns>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.FontFamilyName">
            <summary>
            Font Family Name
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfDrawTextCtrl.FontDesignToUserUnits(System.Int32)">
            <summary>
            Font units to user units
            </summary>
            <param name="Value">Design value</param>
            <returns>Design value in user units</returns>
        </member>
        <member name="M:PdfFileWriter.PdfDrawTextCtrl.CharWidth(System.Char)">
            <summary>
            Character width
            </summary>
            <param name="CharValue">Character</param>
            <returns>Width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfDrawTextCtrl.TextWidth(System.String)">
            <summary>
            Text string width
            </summary>
            <param name="Text">Text string</param>
            <returns>Width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfDrawTextCtrl.TextBoundingBox(System.String)">
            <summary>
            Text bounding box
            </summary>
            <param name="Text">Text string</param>
            <returns>Bounding box rectangle</returns>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.CapHeight">
            <summary>
            Capital M height in user units
            </summary>
            <returns>Capital M height</returns>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.StrikeoutPosition">
            <summary>
            Strikeout position in user units
            </summary>
            <returns>Strikeout position</returns>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.StrikeoutWidth">
            <summary>
            Strikeout width in user units
            </summary>
            <returns>Strikeout line width.</returns>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.UnderlinePosition">
            <summary>
            Underline position in user units
            </summary>
            <returns>Underline position</returns>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.UnderlineWidth">
            <summary>
            Underline width in user units
            </summary>
            <returns>Underline line width.</returns>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.SubscriptPosition">
            <summary>
            Subscript position in user units
            </summary>
            <returns>Subscript position</returns>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.SubscriptSize">
            <summary>
            Subscript character size in points
            </summary>
            <returns>Subscript font size</returns>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.SuperscriptPosition">
            <summary>
            Superscript character position
            </summary>
            <returns>Superscript position</returns>
        </member>
        <member name="P:PdfFileWriter.PdfDrawTextCtrl.SuperscriptSize">
            <summary>
            Superscript character size in points
            </summary>
            <returns>Superscript font size</returns>
        </member>
        <member name="M:PdfFileWriter.PdfDrawTextCtrl.TextFitToWidth(System.Double,System.Double@,System.Double@,System.String)">
            <summary>
            Word spacing to stretch text to given width
            </summary>
            <param name="ReqWidth">Required width</param>
            <param name="WordSpacing">Output word spacing</param>
            <param name="CharSpacing">Output character spacing</param>
            <param name="Text">Text</param>
            <returns>True-done, False-not done.</returns>
        </member>
        <member name="T:PdfFileWriter.PdfEmbeddedFile">
            <summary>
            PDF Embedded file class
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfEmbeddedFile.FileName">
            <summary>
            Gets file name
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfEmbeddedFile.MimeType">
            <summary>
            Gets Mime type
            </summary>
            <remarks>
            <para>
            The PDF embedded file translates the file extension into mime type string.
            If the translation fails the MimeType is set to null.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfEmbeddedFile.CreateEmbeddedFile(PdfFileWriter.PdfDocument,System.String,System.String)">
            <summary>
            PDF embedded file class constructor
            </summary>
            <param name="Document">Current document</param>
            <param name="FileName">File name</param>
            <param name="PdfFileName">PDF file name (see remarks)</param>
            <returns>PdfEmbeddedFile object</returns>
            <remarks>
            <para>
            FileName is the name of the source file on the hard disk.
            PDFFileName is the name of the as saved within the PDF document file.
            If PDFFileName is not given or it is set to null, the class takes
            the hard disk's file name without the path.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfEmbeddedFile.CompareTo(PdfFileWriter.PdfEmbeddedFile)">
            <summary>
            Compare two PdfEmbededFile objects
            </summary>
            <param name="Other">Other argument</param>
            <returns>Compare result</returns>
        </member>
        <member name="M:PdfFileWriter.ExtToMime.CompareTo(PdfFileWriter.ExtToMime)">
            <summary>
            Compare ExtToMime records
            </summary>
            <param name="Other">Other record</param>
            <returns></returns>
        </member>
        <member name="T:PdfFileWriter.EncryptionType">
            <summary>
            Encryption type enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncryptionType.Aes128">
            <summary>
            AES 128 bits
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncryptionType.Standard128">
            <summary>
            Standard 128 bits
            </summary>
        </member>
        <member name="T:PdfFileWriter.Permission">
            <summary>
            PDF reader permission flags enumeration
            </summary>
            <remarks>
            PDF reference manual version 1.7 Table 3.20 
            </remarks>
        </member>
        <member name="F:PdfFileWriter.Permission.None">
            <summary>
            No permission flags
            </summary>
        </member>
        <member name="F:PdfFileWriter.Permission.LowQalityPrint">
            <summary>
            Low quality print (bit 3)
            </summary>
        </member>
        <member name="F:PdfFileWriter.Permission.ModifyContents">
            <summary>
            Modify contents (bit 4)
            </summary>
        </member>
        <member name="F:PdfFileWriter.Permission.ExtractContents">
            <summary>
            Extract contents (bit 5)
            </summary>
        </member>
        <member name="F:PdfFileWriter.Permission.Annotation">
            <summary>
            Annotation (bit 6)
            </summary>
        </member>
        <member name="F:PdfFileWriter.Permission.Interactive">
            <summary>
            Interactive (bit 9)
            </summary>
        </member>
        <member name="F:PdfFileWriter.Permission.Accessibility">
            <summary>
            Accessibility (bit 10)
            </summary>
        </member>
        <member name="F:PdfFileWriter.Permission.AssembleDoc">
            <summary>
            Assemble document (bit 11)
            </summary>
        </member>
        <member name="F:PdfFileWriter.Permission.Print">
            <summary>
            Print (bit 12 plus bit 3)
            </summary>
        </member>
        <member name="F:PdfFileWriter.Permission.All">
            <summary>
            All permission bits (3, 4, 5, 6, 9, 10, 11, 12)
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfEncryption">
            <summary>
            PDF encryption class
            </summary>
            <remarks>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#EncryptionSupport">2.6 Encryption Support</a>
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfEncryption.Dispose">
            <summary>
            Dispose unmanaged resources
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfExtGState.CompareTo(PdfFileWriter.PdfExtGState)">
            <summary>
            Compare two PdfExtGState objects.
            </summary>
            <param name="Other">Other object.</param>
            <returns>Compare result.</returns>
        </member>
        <member name="T:PdfFileWriter.PdfFontFlags">
            <summary>
            PDF font descriptor flags enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontFlags.FixedPitch">
            <summary>
            Fixed pitch font
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontFlags.Serif">
            <summary>
            Serif font
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontFlags.Symbolic">
            <summary>
            Symbolic font
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontFlags.Script">
            <summary>
            Script font
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontFlags.Nonsymbolic">
            <summary>
            Non-symbolic font
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontFlags.Italic">
            <summary>
            Italic font
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontFlags.AllCap">
            <summary>
            All cap font
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontFlags.SmallCap">
            <summary>
            Small cap font
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontFlags.ForceBold">
            <summary>
            Force bold font
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfFont">
            <summary>
            PDF font class
            </summary>
            <remarks>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#LanguageSupport">2.3 Language Support</a>
            </para>
            <para>
            <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#FontResources">For example of defining font resources see 3.2. Font Resources</a>
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfFont.FontFamilyName">
            <summary>
            Font Family Name
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfFont.FontStyle">
            <summary>
            Font style
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfFont.CreatePdfFont(PdfFileWriter.PdfDocument,System.String,System.Drawing.FontStyle,System.Boolean)">
            <summary>
            PDF Font resource constructor
            </summary>
            <param name="Document">Document object</param>
            <param name="FontFamilyName">Font family name</param>
            <param name="FontStyle">Font style</param>
            <param name="EmbeddedFont">Embedded font</param>
            <returns>PdfFont resource</returns>
            <remarks>The returned result is either a new PdfFont or an
            existing one with the same properties.</remarks>
        </member>
        <member name="M:PdfFileWriter.PdfFont.GetCharInfo(System.Int32)">
            <summary>
            Get character information
            </summary>
            <param name="CharValue">Character value</param>
            <returns>Character information class</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.SetCharRangeActive(System.Int32,System.Int32)">
            <summary>
            Set character range active
            All the range will be loaded to the PDF file even if not used
            </summary>
            <param name="StartChar">Start character</param>
            <param name="EndChar">End character</param>
        </member>
        <member name="M:PdfFileWriter.PdfFont.FontDesignToUserUnits(System.Double,System.Int32)">
            <summary>
            Font units to user units
            </summary>
            <param name="FontSize">Font size</param>
            <param name="Value">Design value</param>
            <returns>Design value in user units</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.FontDesignToPdfUnits(System.Int32)">
            <summary>
            Font design units to PDF design units
            </summary>
            <param name="Value">Font design value</param>
            <returns>PDF dictionary value</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.LineSpacing(System.Double)">
            <summary>
            Line spacing in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Line spacing</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.Ascent(System.Double)">
            <summary>
            Font ascent in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Font ascent</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.DesignDescent(System.Double)">
            <summary>
            Font descent in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Font descent</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.InternalLead(System.Double)">
            <summary>
            Font internal lead in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Font internal lead</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.ExternalLead(System.Double)">
            <summary>
            Font external lead in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Font external lead</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.CapHeight(System.Double)">
            <summary>
            Capital M height in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Capital M height</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.StrikeoutPosition(System.Double)">
            <summary>
            Strikeout position in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Strikeout position</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.StrikeoutWidth(System.Double)">
            <summary>
            Strikeout width in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Strikeout line width.</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.UnderlinePosition(System.Double)">
            <summary>
            Underline position in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Underline position</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.UnderlineWidth(System.Double)">
            <summary>
            Underline width in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Underline line width.</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.SubscriptPosition(System.Double)">
            <summary>
            Subscript position in user units
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Subscript position</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.SubscriptSize(System.Double)">
            <summary>
            Subscript character size in points
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Subscript font size</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.SuperscriptPosition(System.Double)">
            <summary>
            Superscript character position
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Superscript position</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.SuperscriptSize(System.Double)">
            <summary>
            Superscript character size in points
            </summary>
            <param name="FontSize">Font size</param>
            <returns>Superscript font size</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.CharWidth(System.Double,System.Char)">
            <summary>
            Character width in user units
            </summary>
            <param name="FontSize">Font size</param>
            <param name="CharValue">Character code</param>
            <returns>Character width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.CharWidth(System.Double,PdfFileWriter.DrawStyle,System.Char)">
            <summary>
            Character width in user units
            </summary>
            <param name="FontSize">Font size</param>
            <param name="DrawStyle">Draw style</param>
            <param name="CharValue">Character code</param>
            <returns>Character width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.CharBoundingBox(System.Double,System.Char)">
            <summary>
            Character bounding box in user coordinate units.
            </summary>
            <param name="FontSize">Font size</param>
            <param name="CharValue">Character</param>
            <returns>Bounding box</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.TextWidth(System.Double,System.String)">
            <summary>
            Text width
            </summary>
            <param name="FontSize">Font size</param>
            <param name="Text">Text</param>
            <returns>Width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.TextFitToWidth(System.Double,System.Double,System.Double@,System.Double@,System.String)">
            <summary>
            Word spacing to stretch text to given width
            </summary>
            <param name="FontSize">Font size</param>
            <param name="ReqWidth">Required width</param>
            <param name="WordSpacing">Output word spacing</param>
            <param name="CharSpacing">Output character spacing</param>
            <param name="Text">Text</param>
            <returns>True-done, False-not done.</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.TextBoundingBox(System.Double,System.String)">
            <summary>
            Text bounding box in user coordinate units.
            </summary>
            <param name="FontSize">Font size</param>
            <param name="Text">Text</param>
            <returns>Bounding box</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.TextKerning(System.String)">
            <summary>
            Text Kerning
            </summary>
            <param name="Text">Text</param>
            <returns>Kerning adjustment pairs</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.TextKerningWidth(System.Double,PdfFileWriter.PdfKerningAdjust[])">
            <summary>
            Text kerning width
            </summary>
            <param name="FontSize">Font size (in points)</param>
            <param name="KerningArray">Kerning array</param>
            <returns>Width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.CompareTo(PdfFileWriter.PdfFont)">
            <summary>
            Compage PDF font objects
            </summary>
            <param name="Other">Other PDFFont</param>
            <returns>Compare result</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFont.Dispose">
            <summary>
            Dispose FontApi
            </summary>
        </member>
        <member name="T:PdfFileWriter.CharInfo">
            <summary>
            One character/Glyph information class
            </summary>
            <remarks>
            This class defines all the information required to display a
            character in the output document. Each character has an
            associated glyph. The glyph geometry is defined in a square.
            The square is DesignHeight by DesignHeight.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.CharInfo.CharCode">
            <summary>
            Character code
            </summary>
        </member>
        <member name="P:PdfFileWriter.CharInfo.GlyphIndex">
            <summary>
            Glyph index
            </summary>
        </member>
        <member name="P:PdfFileWriter.CharInfo.ActiveChar">
            <summary>
            Active character
            </summary>
        </member>
        <member name="P:PdfFileWriter.CharInfo.Type0Font">
            <summary>
            Character code is greater than 255
            </summary>
        </member>
        <member name="P:PdfFileWriter.CharInfo.DesignBBoxLeft">
            <summary>
            Bounding box left in design units
            </summary>
        </member>
        <member name="P:PdfFileWriter.CharInfo.DesignBBoxBottom">
            <summary>
            Bounding box bottom in design units
            </summary>
        </member>
        <member name="P:PdfFileWriter.CharInfo.DesignBBoxRight">
            <summary>
            Bounding box right in design units
            </summary>
        </member>
        <member name="P:PdfFileWriter.CharInfo.DesignBBoxTop">
            <summary>
            Bounding box top in design units
            </summary>
        </member>
        <member name="P:PdfFileWriter.CharInfo.DesignWidth">
            <summary>
            Character width in design units
            </summary>
        </member>
        <member name="M:PdfFileWriter.CharInfo.CompareTo(PdfFileWriter.CharInfo)">
            <summary>
            Compare two glyphs for sort and binary search
            </summary>
            <param name="Other">Other CharInfo</param>
            <returns>Compare result</returns>
        </member>
        <member name="T:PdfFileWriter.FontBox">
            <summary>
            Font box class
            </summary>
            <remarks>
            FontBox class is part of OUTLINETEXTMETRIC structure
            </remarks>
        </member>
        <member name="P:PdfFileWriter.FontBox.Left">
            <summary>
            Gets left side.
            </summary>
        </member>
        <member name="P:PdfFileWriter.FontBox.Top">
            <summary>
            Gets top side.
            </summary>
        </member>
        <member name="P:PdfFileWriter.FontBox.Right">
            <summary>
            Gets right side.
            </summary>
        </member>
        <member name="P:PdfFileWriter.FontBox.Bottom">
            <summary>
            Gets bottom side.
            </summary>
        </member>
        <member name="T:PdfFileWriter.WinPanose">
            <summary>
            Panose class
            </summary>
            <remarks>
            The PANOSE structure describes the PANOSE font-classification
            values for a TrueType font. These characteristics are then
            used to associate the font with other fonts of similar
            appearance but different names.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.WinPanose.bFamilyType">
            <summary>
            Panose family type
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinPanose.bSerifStyle">
            <summary>
            Panose serif style
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinPanose.bWeight">
            <summary>
            Panose weight
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinPanose.bProportion">
            <summary>
            Panose proportion
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinPanose.bContrast">
            <summary>
            Panose contrast
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinPanose.bStrokeVariation">
            <summary>
            Panose stroke variation
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinPanose.bArmStyle">
            <summary>
            Panose arm style
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinPanose.bLetterform">
            <summary>
            Panose letter form
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinPanose.bMidline">
            <summary>
            Panose mid line
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinPanose.bXHeight">
            <summary>
            Panose X height
            </summary>
        </member>
        <member name="T:PdfFileWriter.WinKerningPair">
            <summary>
            Kerning pair class
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinKerningPair.First">
            <summary>
            Gets first character
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinKerningPair.Second">
            <summary>
            Gets second character
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinKerningPair.KernAmount">
            <summary>
            Gets kerning amount in design units
            </summary>
        </member>
        <member name="M:PdfFileWriter.WinKerningPair.#ctor(System.Char,System.Char)">
            <summary>
            Kerning pair constructor
            </summary>
            <param name="First">First character</param>
            <param name="Second">Second character</param>
        </member>
        <member name="M:PdfFileWriter.WinKerningPair.CompareTo(PdfFileWriter.WinKerningPair)">
            <summary>
            Compare kerning pairs
            </summary>
            <param name="Other">Other pair</param>
            <returns>Compare result</returns>
        </member>
        <member name="T:PdfFileWriter.WinTextMetric">
            <summary>
            TextMetric class
            </summary>
            <remarks>
            The TEXTMETRIC structure contains basic information about a
            physical font. All sizes are specified in logical units;
            that is, they depend on the current mapping mode of the
            display context.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmHeight">
            <summary>
            TextMetric height
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmAscent">
            <summary>
            TextMetric ascent
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmDescent">
            <summary>
            TextMetric descent
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmInternalLeading">
            <summary>
            TextMetric internal leading
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmExternalLeading">
            <summary>
            TextMetric external leading
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmAveCharWidth">
            <summary>
            TextMetric average character width
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmMaxCharWidth">
            <summary>
            TextMetric maximum character width
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmWeight">
            <summary>
            TextMetric height
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmOverhang">
            <summary>
            TextMetric overhang
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmDigitizedAspectX">
            <summary>
            TextMetric digitize aspect X
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmDigitizedAspectY">
            <summary>
            TextMetric digitize aspect Y
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmFirstChar">
            <summary>
            TextMetric first character
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmLastChar">
            <summary>
            TextMetric last character
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmDefaultChar">
            <summary>
            TextMetric default character
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmBreakChar">
            <summary>
            TextMetric break character
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmItalic">
            <summary>
            TextMetric italic
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmUnderlined">
            <summary>
            TextMetric underlined
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmStruckOut">
            <summary>
            TextMetric struck out
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmPitchAndFamily">
            <summary>
            TextMetric pitch and family
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinTextMetric.tmCharSet">
            <summary>
            TextMetric character set
            </summary>
        </member>
        <member name="T:PdfFileWriter.WinOutlineTextMetric">
            <summary>
            Outline text metric class
            </summary>
            <remarks>
            The OUTLINETEXTMETRIC structure contains metrics describing
            a TrueType font.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmSize">
            <summary>
            Outline text metric size
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmTextMetric">
            <summary>
            Outline text metric TextMetric
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmPanoseNumber">
            <summary>
            Outline text metric panose number
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmfsSelection">
            <summary>
            Outline text metric FS selection
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmfsType">
            <summary>
            Outline text metric FS type
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmsCharSlopeRise">
            <summary>
            Outline text metric char slope rise
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmsCharSlopeRun">
            <summary>
            Outline text metric char slope run
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmItalicAngle">
            <summary>
            Outline text metric italic angle
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmEMSquare">
            <summary>
            Outline text metric EM square
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmAscent">
            <summary>
            Outline text metric ascent
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmDescent">
            <summary>
            Outline text metric descent
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmLineGap">
            <summary>
            Outline text metric line gap
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmsCapEmHeight">
            <summary>
            Outline text metric capital M height
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmsXHeight">
            <summary>
            Outline text metric X height
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmrcFontBox">
            <summary>
            Outline text metric Font box class
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmMacAscent">
            <summary>
            Outline text metric Mac ascent
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmMacDescent">
            <summary>
            Outline text metric Mac descent
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmMacLineGap">
            <summary>
            Outline text metric Mac line gap
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmusMinimumPPEM">
            <summary>
            Outline text metric minimum PPEM
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmptSubscriptSize">
            <summary>
            Outline text metric subscript size
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmptSubscriptOffset">
            <summary>
            Outline text metric subscript offset
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmptSuperscriptSize">
            <summary>
            Outline text metric superscript size
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmptSuperscriptOffset">
            <summary>
            Outline text metric superscript offset
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmsStrikeoutSize">
            <summary>
            Outline text metric strikeout size
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmsStrikeoutPosition">
            <summary>
            Outline text metric strikeout position
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmsUnderscoreSize">
            <summary>
            Outline text metric underscore size
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmsUnderscorePosition">
            <summary>
            Outline text metric underscore position
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmpFamilyName">
            <summary>
            Outline text metric family name
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmpFaceName">
            <summary>
            Outline text metric face name
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmpStyleName">
            <summary>
            Outline text metric style name
            </summary>
        </member>
        <member name="P:PdfFileWriter.WinOutlineTextMetric.otmpFullName">
            <summary>
            Outline text metric full name
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfFontApi">
            <summary>
            Font API class
            </summary>
            <remarks>
            Windows API callable by C# program
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfFontApi.#ctor(System.Drawing.Font)">
            <summary>
            Font API constructor
            </summary>
            <param name="DesignFont">Design font</param>
        </member>
        <member name="M:PdfFileWriter.PdfFontApi.GetGlyphMetricsApiByCode(System.Int32)">
            <summary>
            Gets glyph metric
            </summary>
            <param name="CharCode">Character code</param>
            <returns>Character info class</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFontApi.GetGlyphMetricsApiByGlyphIndex(System.Int32)">
            <summary>
            Gets glyph metric
            </summary>
            <param name="GlyphIndex">Character code</param>
            <returns>Character info class</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFontApi.GetGlyphMetricsApi(System.Int32)">
            <summary>
            Gets array of glyph metrics
            </summary>
            <param name="CharValue">Character code</param>
            <returns>Array of character infos</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFontApi.GetKerningPairsApi(System.Int32,System.Int32)">
            <summary>
            Gets kerning pairs array
            </summary>
            <param name="FirstChar">First character</param>
            <param name="LastChar">Last character</param>
            <returns>Array of kerning pairs</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFontApi.GetOutlineTextMetricsApi">
            <summary>
            Gets OUTLINETEXTMETRICW structure
            </summary>
            <returns>Outline text metric class</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFontApi.GetTextMetricsApi">
            <summary>
            Gets TEXTMETRICW structure
            </summary>
            <returns>Text metric class</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFontApi.GetFontDataApi(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Gets font data tables
            </summary>
            <param name="TableTag">Table Tag</param>
            <param name="Offset">Table offset</param>
            <param name="BufSize">Table size</param>
            <returns>Table info as byte array</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFontApi.GetGlyphIndicesApi(System.Int32,System.Int32)">
            <summary>
            Gets glyph indices array
            </summary>
            <param name="FirstChar">First character</param>
            <param name="LastChar">Last character</param>
            <returns>Array of glyph indices.</returns>
        </member>
        <member name="M:PdfFileWriter.PdfFontApi.Dispose">
            <summary>
            Dispose unmanaged resources
            </summary>
        </member>
        <member name="T:PdfFileWriter.FontFileHeader">
            <summary>
            Font file header
            </summary>
        </member>
        <member name="T:PdfFileWriter.TypeOneFontCode">
            <summary>
            Type one font code enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.TypeOneFontCode.Helvetica">
            <summary>
            Helvetica
            </summary>
        </member>
        <member name="F:PdfFileWriter.TypeOneFontCode.HelveticaBold">
            <summary>
            Helvetica bold
            </summary>
        </member>
        <member name="F:PdfFileWriter.TypeOneFontCode.HelveticaItalic">
            <summary>
            Helvetica italic
            </summary>
        </member>
        <member name="F:PdfFileWriter.TypeOneFontCode.HelveticaBoldItalic">
            <summary>
            Helvetica bold and italic
            </summary>
        </member>
        <member name="F:PdfFileWriter.TypeOneFontCode.Times">
            <summary>
            Times
            </summary>
        </member>
        <member name="F:PdfFileWriter.TypeOneFontCode.TimesBold">
            <summary>
            Times bold
            </summary>
        </member>
        <member name="F:PdfFileWriter.TypeOneFontCode.TimesItalic">
            <summary>
            Times italic
            </summary>
        </member>
        <member name="F:PdfFileWriter.TypeOneFontCode.TimesBoldItalic">
            <summary>
            Times bold and italic
            </summary>
        </member>
        <member name="F:PdfFileWriter.TypeOneFontCode.Courier">
            <summary>
            Courier
            </summary>
        </member>
        <member name="F:PdfFileWriter.TypeOneFontCode.CourierBold">
            <summary>
            Courier bold
            </summary>
        </member>
        <member name="F:PdfFileWriter.TypeOneFontCode.CourierItalic">
            <summary>
            Courier italic
            </summary>
        </member>
        <member name="F:PdfFileWriter.TypeOneFontCode.CourierBoldItalic">
            <summary>
            Courier bold and italic
            </summary>
        </member>
        <member name="F:PdfFileWriter.TypeOneFontCode.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="F:PdfFileWriter.TypeOneFontCode.ZapfDingbats">
            <summary>
            ZapfDingbats symbols
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfFontTypeOne">
            <summary>
            PDF Font type one class
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontTypeOne.FontCode">
            <summary>
            Type one font code enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontTypeOne.FontInfo">
            <summary>
            Type one font information class
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontTypeOne.ZaDiStylizedV">
            <summary>
            ZapfDingbats stylized V
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontTypeOne.ZaDiStrightV">
            <summary>
            ZapfDingbats stright V
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontTypeOne.ZaDiThinX">
            <summary>
            ZapfDingbats thin X
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontTypeOne.ZaDiThickX">
            <summary>
            ZapfDingbats thick X
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontTypeOne.ZaDiStylizedThinX">
            <summary>
            ZapfDingbats stylized thin X
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontTypeOne.ZaDiStylizedThickX">
            <summary>
            ZapfDingbats stylized thick X
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontTypeOne.ZaDiFiveSidesStar">
            <summary>
            ZapfDingbats five sides star
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontTypeOne.ZaDiSixSidesStar">
            <summary>
            ZapfDingbats six sides star
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontTypeOne.ZaDiCircle">
            <summary>
            ZapfDingbats circle
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfFontTypeOne.ZaDiSquare">
            <summary>
            ZapfDingbats square
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfFontTypeOne.CreateFontTypeOne(PdfFileWriter.PdfDocument,PdfFileWriter.TypeOneFontCode)">
            <summary>
            Create type one font
            </summary>
            <param name="Document">Pdf document main object</param>
            <param name="FontCode">Type one font code</param>
            <returns>Font type1 object</returns>
        </member>
        <member name="T:PdfFileWriter.PointD">
            <summary>
            Point in double precision class
            </summary>
        </member>
        <member name="P:PdfFileWriter.PointD.X">
            <summary>
            Gets or sets X
            </summary>
        </member>
        <member name="P:PdfFileWriter.PointD.Y">
            <summary>
            Gets or sets Y
            </summary>
        </member>
        <member name="M:PdfFileWriter.PointD.#ctor(PdfFileWriter.PointD)">
            <summary>
            PointD copy constructor
            </summary>
            <param name="Other">Other point</param>
        </member>
        <member name="M:PdfFileWriter.PointD.#ctor(System.Double,System.Double)">
            <summary>
            PointD constructor
            </summary>
            <param name="X">X</param>
            <param name="Y">Y</param>
        </member>
        <member name="M:PdfFileWriter.PointD.#ctor(PdfFileWriter.PointD,System.Double,System.Double)">
            <summary>
            PointD constructor
            </summary>
            <param name="Center">Center point</param>
            <param name="Radius">Radius</param>
            <param name="Alpha">Angle</param>
        </member>
        <member name="M:PdfFileWriter.PointD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            PointD constructor
            </summary>
            <param name="CenterX">Center X</param>
            <param name="CenterY">Center Y</param>
            <param name="Radius">Radius</param>
            <param name="Alpha">Angle</param>
        </member>
        <member name="M:PdfFileWriter.PointD.#ctor(PdfFileWriter.LineD,PdfFileWriter.LineD)">
            <summary>
            PointD constructor
            </summary>
            <param name="L1">Line 1</param>
            <param name="L2">Line 2</param>
        </member>
        <member name="T:PdfFileWriter.SizeD">
            <summary>
            Size in double precision class
            </summary>
        </member>
        <member name="P:PdfFileWriter.SizeD.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:PdfFileWriter.SizeD.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="M:PdfFileWriter.SizeD.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PdfFileWriter.SizeD.#ctor(System.Double,System.Double)">
            <summary>
            SizeD constructor
            </summary>
            <param name="Width">Width</param>
            <param name="Height">Height</param>
        </member>
        <member name="T:PdfFileWriter.LineD">
            <summary>
            Line in double precision class
            </summary>
        </member>
        <member name="P:PdfFileWriter.LineD.P1">
            <summary>
            Gets or sets point 1
            </summary>
        </member>
        <member name="P:PdfFileWriter.LineD.P2">
            <summary>
            Gets or sets point 2
            </summary>
        </member>
        <member name="M:PdfFileWriter.LineD.#ctor(PdfFileWriter.PointD,PdfFileWriter.PointD)">
            <summary>
            LineD constructor (two points)
            </summary>
            <param name="P1">Point 1</param>
            <param name="P2">Point 2</param>
        </member>
        <member name="M:PdfFileWriter.LineD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            LineD constructor (coordinates)
            </summary>
            <param name="X1">Point1 X</param>
            <param name="Y1">Point1 Y</param>
            <param name="X2">Point2 X</param>
            <param name="Y2">Point2 Y</param>
        </member>
        <member name="P:PdfFileWriter.LineD.DX">
            <summary>
            Delta X
            </summary>
        </member>
        <member name="P:PdfFileWriter.LineD.DY">
            <summary>
            Delta Y
            </summary>
        </member>
        <member name="P:PdfFileWriter.LineD.Length">
            <summary>
            Line length
            </summary>
        </member>
        <member name="T:PdfFileWriter.BezierD">
            <summary>
            Bezier curve class
            </summary>
            <remarks>
            All dimensions are in double precision.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.BezierD.P1">
            <summary>
            Bezier P1
            </summary>
        </member>
        <member name="P:PdfFileWriter.BezierD.P2">
            <summary>
            Bezier P2
            </summary>
        </member>
        <member name="P:PdfFileWriter.BezierD.P3">
            <summary>
            Bezier P3
            </summary>
        </member>
        <member name="P:PdfFileWriter.BezierD.P4">
            <summary>
            Bezier P4
            </summary>
        </member>
        <member name="F:PdfFileWriter.BezierD.CircleFactor">
            <summary>
            Circle factor
            </summary>
            <remarks>The circle factor makes Bezier curve to look like a circle.</remarks>
        </member>
        <member name="M:PdfFileWriter.BezierD.#ctor(PdfFileWriter.PointD,PdfFileWriter.PointD,PdfFileWriter.PointD,PdfFileWriter.PointD)">
            <summary>
            Bezier constructor
            </summary>
            <param name="P1">P1</param>
            <param name="P2">P2</param>
            <param name="P3">P3</param>
            <param name="P4">P4</param>
        </member>
        <member name="M:PdfFileWriter.BezierD.#ctor(PdfFileWriter.PointD,System.Double,System.Double,System.Double,System.Double,PdfFileWriter.PointD)">
            <summary>
            Bezier constructor
            </summary>
            <param name="P1">P1</param>
            <param name="Factor2">Factor2</param>
            <param name="Alpha2">Alpha2</param>
            <param name="Factor3">Factor3</param>
            <param name="Alpha3">Alpha3</param>
            <param name="P4">P4</param>
        </member>
        <member name="M:PdfFileWriter.BezierD.#ctor(PdfFileWriter.PointD,PdfFileWriter.PointD,PdfFileWriter.PointD)">
            <summary>
            BezierD constructor from quadratic bezier points
            </summary>
            <param name="QP1">Quadratic Bezier point 1</param>
            <param name="QP2">Quadratic Bezier point 2</param>
            <param name="QP3">Quadratic Bezier point 3</param>
        </member>
        <member name="M:PdfFileWriter.BezierD.CircleFirstQuarter(System.Double,System.Double,System.Double)">
            <summary>
            Bezier first quarter circle
            </summary>
            <param name="X">Center X</param>
            <param name="Y">Center Y</param>
            <param name="Radius">Radius</param>
            <returns>Bezier curve</returns>
        </member>
        <member name="M:PdfFileWriter.BezierD.CircleSecondQuarter(System.Double,System.Double,System.Double)">
            <summary>
            Bezier second quarter circle
            </summary>
            <param name="X">Center X</param>
            <param name="Y">Center Y</param>
            <param name="Radius">Radius</param>
            <returns>Bezier curve</returns>
        </member>
        <member name="M:PdfFileWriter.BezierD.CircleThirdQuarter(System.Double,System.Double,System.Double)">
            <summary>
            Bezier third quarter circle
            </summary>
            <param name="X">Center X</param>
            <param name="Y">Center Y</param>
            <param name="Radius">Radius</param>
            <returns>Bezier curve</returns>
        </member>
        <member name="M:PdfFileWriter.BezierD.CircleFourthQuarter(System.Double,System.Double,System.Double)">
            <summary>
            Bezier fourth quarter circle
            </summary>
            <param name="X">Center X</param>
            <param name="Y">Center Y</param>
            <param name="Radius">Radius</param>
            <returns>Bezier curve</returns>
        </member>
        <member name="M:PdfFileWriter.BezierD.OvalFirstQuarter(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Oval first quarter
            </summary>
            <param name="X">Center X</param>
            <param name="Y">Center Y</param>
            <param name="Width">Width</param>
            <param name="Height">Height</param>
            <returns>Bezier curve</returns>
        </member>
        <member name="M:PdfFileWriter.BezierD.OvalSecondQuarter(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Oval second quarter
            </summary>
            <param name="X">Center X</param>
            <param name="Y">Center Y</param>
            <param name="Width">Width</param>
            <param name="Height">Height</param>
            <returns>Bezier curve</returns>
        </member>
        <member name="M:PdfFileWriter.BezierD.OvalThirdQuarter(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Oval third quarter
            </summary>
            <param name="X">Center X</param>
            <param name="Y">Center Y</param>
            <param name="Width">Width</param>
            <param name="Height">Height</param>
            <returns>Bezier curve</returns>
        </member>
        <member name="M:PdfFileWriter.BezierD.OvalFourthQuarter(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Oval fourth quarter circle
            </summary>
            <param name="X">Center X</param>
            <param name="Y">Center Y</param>
            <param name="Width">Width</param>
            <param name="Height">Height</param>
            <returns>Bezier curve</returns>
        </member>
        <member name="T:PdfFileWriter.SaveImageAs">
            <summary>
            Save image as enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.SaveImageAs.Jpeg">
            <summary>
            Jpeg format (default)
            </summary>
        </member>
        <member name="F:PdfFileWriter.SaveImageAs.IndexedImage">
            <summary>
            PDF indexed bitmap format
            </summary>
        </member>
        <member name="F:PdfFileWriter.SaveImageAs.GrayImage">
            <summary>
            convert to gray image
            </summary>
        </member>
        <member name="F:PdfFileWriter.SaveImageAs.BWImage">
            <summary>
            Black and white format from bool array
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfImage">
            <summary>
            PDF Image class
            </summary>
            <remarks>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#ImageSupport">2.4 Image Support</a>
            </para>
            <para>
            <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#DrawImage">For example of drawing image see 3.9. Draw Image and Clip it</a>
            </para>
            </remarks>
        </member>
        <member name="F:PdfFileWriter.PdfImage.SaveAs">
            <summary>
            Save image as
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfImage.CropRect">
            <summary>
            Crop image rectangle (image pixels)
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfImage.CropPercent">
            <summary>
            Crop image rectangle (percent of image size)
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfImage.ReverseBW">
            <summary>
            Reverse black and white (SaveImageAs.BWImage)
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfImage.LayerControl">
            <summary>
            Layer control
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfImage.Resolution">
            <summary>
            Set output resolution 
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfImage._Resolution">
            <summary>
            Image resolution
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfImage.DefaultQuality">
            <summary>
            Default Jpeg image quality
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfImage.ImageQuality">
            <summary>
            Gets or sets Jpeg image quality
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfImage.GrayToBWCutoff">
            <summary>
            Gray to BW cutoff level
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfImage.WidthPix">
            <summary>
            Gets image width in pixels
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfImage.HeightPix">
            <summary>
            Gets image height in pixels
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfImage.#ctor(PdfFileWriter.PdfDocument)">
            <summary>
            PdfImage constructor
            </summary>
            <param name="Document">PdfDocument</param>
        </member>
        <member name="M:PdfFileWriter.PdfImage.LoadImage(System.String)">
            <summary>
            Load image from file
            </summary>
            <param name="ImageFileName">Image file name</param>
        </member>
        <member name="M:PdfFileWriter.PdfImage.LoadImage(System.Drawing.Image)">
            <summary>
            Load image from Image derived class (Bitmap)
            </summary>
            <param name="Image">Image derived class</param>
        </member>
        <member name="M:PdfFileWriter.PdfImage.LoadImage(System.Boolean[0:,0:])">
            <summary>
            Load image from black and white bool matrix
            </summary>
            <param name="BWImage">BW bool matrix</param>
        </member>
        <member name="M:PdfFileWriter.PdfImage.LoadImage(PdfFileWriter.Pdf417Encoder)">
            <summary>
            Load image from Pdf417Encoder
            </summary>
            <param name="Pdf417Encoder">Pdf417 encoder</param>
        </member>
        <member name="M:PdfFileWriter.PdfImage.LoadImage(PdfFileWriter.PdfQREncoder)">
            <summary>
            Load image from QRCode encoder
            </summary>
            <param name="QREncoder">QRCode encoder</param>
        </member>
        <member name="M:PdfFileWriter.PdfImage.Dispose">
            <summary>
            Dispose unmanaged resources
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfImageSizePos">
            <summary>
            Image size and position class
            </summary>
            <remarks>
            Delta X and Y are the adjustments to image position to
            meet the content alignment request.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfImageSizePos.ImageSize(PdfFileWriter.PdfImage,PdfFileWriter.SizeD)">
            <summary>
            Calculates image size to preserve aspect ratio.
            </summary>
            <param name="Image">PdfImage defining image width and height.</param>
            <param name="DrawingArea">Image display area.</param>
            <returns>Adjusted image display area.</returns>
            <remarks>
            Calculates best fit to preserve aspect ratio.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfImageSizePos.ImageSize(System.Int32,System.Int32,PdfFileWriter.SizeD)">
            <summary>
            Calculate best fit to preserve aspect ratio
            </summary>
            <param name="ImageWidthPix">Image width in pixels.</param>
            <param name="ImageHeightPix">Image height in pixels.</param>
            <param name="DrawingArea">Drawing area.</param>
            <returns>Image size in user units.</returns>
        </member>
        <member name="M:PdfFileWriter.PdfImageSizePos.ImageArea(PdfFileWriter.PdfImage,PdfFileWriter.PdfRectangle,System.Drawing.ContentAlignment)">
            <summary>
            Adjust image drawing area for both aspect ratio and content alignment
            </summary>
            <param name="Image">PdfImage with width and height in pixels.</param>
            <param name="DrawArea">Drawing area rectangle</param>
            <param name="Alignment">Content alignment.</param>
            <returns>Adjusted drawing area rectangle</returns>
        </member>
        <member name="M:PdfFileWriter.PdfImageSizePos.ImageArea(System.Int32,System.Int32,PdfFileWriter.PdfRectangle,System.Drawing.ContentAlignment)">
            <summary>
            Adjust image drawing area for both aspect ratio and content alignment
            </summary>
            <param name="ImageWidthPix">Image width in pixels.</param>
            <param name="ImageHeightPix">Image height in pixels.</param>
            <param name="DrawingArea">Drawing area.</param>
            <param name="Alignment">Content alignment.</param>
            <returns>Adjusted drawing area rectangle</returns>
        </member>
        <member name="T:PdfFileWriter.PdfInfo">
            <summary>
            PDF document information dictionary
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfInfo.CreatePdfInfo(PdfFileWriter.PdfDocument)">
            <summary>
            Constructor for PdfInfo class
            </summary>
            <param name="Document">Main document class</param>
            <returns>PdfInfo object</returns>
            <remarks>
            <para>The constructor initialize the /Info dictionary with 4 key value pairs. </para>
            <list type="table">
            <item><description>Creation date set to current local system date</description></item>
            <item><description>Modification date set to current local system date</description></item>
            <item><description>Creator is PdfFileWriter C# Class Library Version No</description></item>
            <item><description>Producer is PdfFileWriter C# Class Library Version No</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfInfo.#ctor(PdfFileWriter.PdfDocument)">
            <summary>
            Protected constructor
            </summary>
            <param name="Document">Main document object</param>
        </member>
        <member name="M:PdfFileWriter.PdfInfo.CreationDate(System.DateTime)">
            <summary>
            Sets document creation date and time
            </summary>
            <param name="Date">Creation date and time</param>
        </member>
        <member name="M:PdfFileWriter.PdfInfo.ModDate(System.DateTime)">
            <summary>
            Sets document last modify date and time
            </summary>
            <param name="Date">Modify date and time</param>
        </member>
        <member name="M:PdfFileWriter.PdfInfo.Title(System.String)">
            <summary>
            Sets document title
            </summary>
            <param name="Title">Title</param>
        </member>
        <member name="M:PdfFileWriter.PdfInfo.Author(System.String)">
            <summary>
            Sets document author 
            </summary>
            <param name="Author">Author</param>
        </member>
        <member name="M:PdfFileWriter.PdfInfo.Subject(System.String)">
            <summary>
            Sets document subject
            </summary>
            <param name="Subject">Subject</param>
        </member>
        <member name="M:PdfFileWriter.PdfInfo.Keywords(System.String)">
            <summary>
            Sets keywords associated with the document
            </summary>
            <param name="Keywords">Keywords list</param>
        </member>
        <member name="M:PdfFileWriter.PdfInfo.Creator(System.String)">
            <summary>
            Sets the name of the application that created the document
            </summary>
            <param name="Creator">Creator</param>
        </member>
        <member name="M:PdfFileWriter.PdfInfo.Producer(System.String)">
            <summary>
            Sets the name of the application that produced the document
            </summary>
            <param name="Producer">Producer</param>
        </member>
        <member name="T:PdfFileWriter.PdfJavaScript">
            <summary>
            Jave Script class
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfJavaScript.#ctor(PdfFileWriter.PdfDocument,System.String)">
            <summary>
            Java script class constructor
            </summary>
            <param name="Document">PDF document class</param>
            <param name="JavaScript">Java script text</param>
        </member>
        <member name="T:PdfFileWriter.PdfKerningAdjust">
            <summary>
            Kerning adjustment class
            </summary>
            <remarks>
            Text position adjustment for TJ operator.
            The adjustment is for a font height of one point.
            Mainly used for font kerning.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfKerningAdjust.Text">
            <summary>
            Gets or sets Text
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfKerningAdjust.Adjust">
            <summary>
            Gets or sets adjustment
            </summary>
            <remarks>
            Adjustment units are in PDF design unit. To convert to user units: Adjust * FontSize / (1000.0 * ScaleFactor)
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfKerningAdjust.#ctor(System.String,System.Double)">
            <summary>
            Kerning adjustment constructor
            </summary>
            <param name="Text">Text</param>
            <param name="Adjust">Adjustment</param>
        </member>
        <member name="T:PdfFileWriter.LockLayer">
            <summary>
            Lock/unlock layer enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.LockLayer.Unlocked">
            <summary>
            Unlock layer (default)
            </summary>
        </member>
        <member name="F:PdfFileWriter.LockLayer.Locked">
            <summary>
            Lock layer
            </summary>
        </member>
        <member name="T:PdfFileWriter.LayerState">
            <summary>
            Layer state
            </summary>
        </member>
        <member name="F:PdfFileWriter.LayerState.On">
            <summary>
            Layer state is ON
            </summary>
        </member>
        <member name="F:PdfFileWriter.LayerState.Off">
            <summary>
            Layer state is OFF
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfLayer">
            <summary>
            PdfLayer class
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfLayer.Name">
            <summary>
            Layer name
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfLayer.Locked">
            <summary>
            Layer locked or unlocked
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfLayer.State">
            <summary>
            Initial layer state (on or off)
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfLayer.RadioButton">
            <summary>
            Layer is a radio button
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfLayer.#ctor(PdfFileWriter.PdfLayers,System.String)">
            <summary>
            Layer constructor
            </summary>
            <param name="LayersParent">Layers parent</param>
            <param name="Name">Layer's name</param>
        </member>
        <member name="M:PdfFileWriter.PdfLayer.CompareTo(PdfFileWriter.PdfLayer)">
            <summary>
            CompareTo for IComparabler
            </summary>
            <param name="Other">Other layer</param>
            <returns>Compare result</returns>
        </member>
        <member name="T:PdfFileWriter.ListMode">
            <summary>
            Layers list mode enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.ListMode.AllPages">
            <summary>
            List all layers
            </summary>
        </member>
        <member name="F:PdfFileWriter.ListMode.VisiblePages">
            <summary>
            List layers for visible pages
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfLayers">
            <summary>
            PdfLayers control class
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfLayers.Name">
            <summary>
            Layers name
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfLayers.ListMode">
            <summary>
            Layers list mode
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfLayers.#ctor(PdfFileWriter.PdfDocument,System.String)">
            <summary>
            Layers constructor
            </summary>
            <param name="Document">PDF Document</param>
            <param name="Name">Layers name</param>
        </member>
        <member name="M:PdfFileWriter.PdfLayers.DisplayOrder(PdfFileWriter.PdfLayer)">
            <summary>
            Layer's display order in layers panel
            </summary>
            <param name="Layer">Layer object</param>
        </member>
        <member name="M:PdfFileWriter.PdfLayers.DisplayOrderStartGroup(System.String)">
            <summary>
            Layer's display order group start marker
            </summary>
            <param name="GroupName">Optional group name</param>
        </member>
        <member name="M:PdfFileWriter.PdfLayers.DisplayOrderEndGroup">
            <summary>
            Layer's display order group end marker
            </summary>
        </member>
        <member name="T:PdfFileWriter.LocMarkerScope">
            <summary>
            Location marker scope
            </summary>
        </member>
        <member name="F:PdfFileWriter.LocMarkerScope.LocalDest">
            <summary>
            Location marker is local
            </summary>
        </member>
        <member name="F:PdfFileWriter.LocMarkerScope.NamedDest">
            <summary>
            Location marker is global and local
            </summary>
        </member>
        <member name="T:PdfFileWriter.DestFit">
            <summary>
            Named destination fit constants
            </summary>
        </member>
        <member name="F:PdfFileWriter.DestFit.Fit">
            <summary>
            Fit entire page. No arguments.
            </summary>
            <remarks>
            Display the page designated by page, with its contents magnified
            just enough to fit the entire page within the window both horizontally
            and vertically. If the required horizontal and vertical magnification
            factors are different, use the smaller of the two, centering the page
            within the window in the other dimension.
            </remarks>
        </member>
        <member name="F:PdfFileWriter.DestFit.FitH">
            <summary>
            Display the page with top coordinate at top of the window. One argument.
            </summary>
            <remarks>
            Display the page designated by page, with the vertical coordinate top
            positioned at the top edge of the window and the contents of the page
            magnified just enough to fit the entire width of the page within the
            window. A null value for top specifies that the current value of that
            parameter is to be retained unchanged.
            </remarks>
        </member>
        <member name="F:PdfFileWriter.DestFit.FitV">
            <summary>
            Display the page with left coordinate at left side of the window. One argument.
            </summary>
            <remarks>
            Display the page designated by page, with the horizontal coordinate left
            positioned at the left edge of the window and the contents of the page
            magnified just enough to fit the entire height of the page within the
            window. A null value for left specifies that the current value of that
            parameter is to be retained unchanged.
            </remarks>
        </member>
        <member name="F:PdfFileWriter.DestFit.FitR">
            <summary>
            Display the page within rectangle. Four argument.
            </summary>
            <remarks>
            Display the page designated by page, with its contents magnified just enough
            to fit the rectangle specified by the coordinates left, bottom, right, and
            topentirely within the window both horizontally and vertically. If the required
            horizontal and vertical magnification factors are different, use the smaller
            of the two, centering the rectangle within the window in the other dimension.
            A null value for any of the parameters may result in unpredictable behavior.
            </remarks>
        </member>
        <member name="F:PdfFileWriter.DestFit.FitB">
            <summary>
            Fit entire page including boundig box. No arguments.
            </summary>
            <remarks>
            Display the page designated by page, with its contents magnified just enough
            to fit its bounding box entirely within the window both horizontally and
            vertically. If the required horizontal and vertical magnification factors are
            different, use the smaller of the two, centering the bounding box within the
            window in the other dimension.
            </remarks>
        </member>
        <member name="F:PdfFileWriter.DestFit.FitBH">
            <summary>
            Display the page with top coordinate at top of the window. One argument.
            </summary>
            <remarks>
            Display the page designated by page, with the vertical coordinate top positioned
            at the top edge of the window and the contents of the page magnified just enough
            to fit the entire width of its bounding box within the window. A null value for
            top specifies that the current value of that parameter is to be retained unchanged.
            </remarks>
        </member>
        <member name="F:PdfFileWriter.DestFit.FitBV">
            <summary>
            Display the page with left coordinate at left side of the window. One argument.
            </summary>
            <remarks>
            Display the page designated by page, with the horizontal coordinate left positioned
            at the left edge of the window and the contents of the page magnified just enough
            to fit the entire height of its bounding box within the window. A null value for
            left specifies that the current value of that parameter is to be retained unchanged.
            </remarks>
        </member>
        <member name="T:PdfFileWriter.PdfMetadata">
            <summary>
            PDF metadata class
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfMetadata.#ctor(PdfFileWriter.PdfDocument,System.String)">
            <summary>
            PDF metadata constructor
            </summary>
            <param name="Document">PDF document</param>
            <param name="FileName">Metadata file name</param>
        </member>
        <member name="M:PdfFileWriter.PdfMetadata.#ctor(PdfFileWriter.PdfDocument,System.Byte[])">
            <summary>
            PDF metadata constructor
            </summary>
            <param name="Document">PDF document</param>
            <param name="Metadata">Metadata binary array</param>
        </member>
        <member name="T:PdfFileWriter.NFI">
            <summary>
            Number Format Information static class
            </summary>
            <remarks>
            Adobe readers expect decimal separator to be a period.
            Some countries define decimal separator as a comma.
            The project uses NFI.DecSep to force period for all regions.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.NFI.PeriodDecSep">
            <summary>
            Define period as number decimal separator.
            </summary>
            <remarks>
            NumberFormatInfo is used with string formatting to set the
            decimal separator to a period regardless of region.
            </remarks>
        </member>
        <member name="T:PdfFileWriter.PdfObject">
            <summary>
            PDF indirect object base class
            </summary>
            <remarks>
            PDF indirect object base class.
            User program cannot call it directly.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfObject.Document">
            <summary>
            PDF document object
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfObject.ScaleFactor">
            <summary>
            Scale factor
            </summary>
            <remarks>Convert from user unit of measure to points.</remarks>
        </member>
        <member name="M:PdfFileWriter.PdfObject.CompareTo(PdfFileWriter.PdfObject)">
            <summary>
            Compare the resource codes of two PDF objects.
            </summary>
            <param name="Other">Other PdfObject</param>
            <returns>Compare result</returns>
            <remarks>
            Used by PdfContents to maintain resource objects in sorted order.
            </remarks>
        </member>
        <member name="T:PdfFileWriter.PdfPage">
            <summary>
            PDF page class
            </summary>
            <remarks>
            PDF page class represent one page in the document.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfPage.#ctor(PdfFileWriter.PdfDocument)">
            <summary>
            Default constructor
            </summary>
            <param name="Document">Parent PDF document object</param>
            <remarks>
            Page size is taken from PdfDocument
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfPage.#ctor(PdfFileWriter.PdfDocument,PdfFileWriter.SizeD)">
            <summary>
            Constructor
            </summary>
            <param name="Document">Parent PDF document object</param>
            <param name="PageSize">Paper size for this page</param>
            <remarks>
            PageSize override the default page size
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfPage.#ctor(PdfFileWriter.PdfDocument,PdfFileWriter.PaperType,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="Document">Parent PDF document object</param>
            <param name="PaperType">Paper type</param>
            <param name="Landscape">If Lanscape is true, width and height are swapped.</param>
            <remarks>
            PaperType and orientation override the default page size.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfPage.#ctor(PdfFileWriter.PdfDocument,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="Document">Parent PDF document object</param>
            <param name="Width">Page width</param>
            <param name="Height">Page height</param>
            <remarks>
            Width and Height override the default page size
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfPage.#ctor(PdfFileWriter.PdfPage)">
            <summary>
            Clone Constructor
            </summary>
            <param name="Page">Existing page object</param>
        </member>
        <member name="M:PdfFileWriter.PdfPage.PageSize">
            <summary>
            Page size
            </summary>
            <returns>Page size</returns>
            <remarks>Page size in user units of measure. If Width is less than height
            orientation is portrait. Otherwise orientation is landscape.</remarks>
        </member>
        <member name="M:PdfFileWriter.PdfPage.AddContents(PdfFileWriter.PdfContents)">
            <summary>
            Add existing contents to page
            </summary>
            <param name="Contents">Contents object</param>
        </member>
        <member name="M:PdfFileWriter.PdfPage.GetCurrentContents">
            <summary>
            Gets the current contents of this page
            </summary>
            <returns>Page's current contents</returns>
        </member>
        <member name="T:PdfFileWriter.PdfPrintDocument">
            <summary>
            PDF print document class
            </summary>
            <remarks>
            <para>
            It is a derived class of PrintDocument.
            The class converts the metafile output of PrintDocument
            to an image. The image is displayed in the PDF document.
            </para>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#PrintDocumentSupport">2.11 Print Document Support</a>
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfPrintDocument.PageCropRect">
            <summary>
            Document page crop rectangle
            </summary>
            <remarks>
            Dimensions are in user units. The origin is top left corner.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfPrintDocument.Resolution">
            <summary>
            Image resolution in pixels per inch (default is 96)
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfPrintDocument.SaveAs">
            <summary>
            Save image as (default is jpeg)
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfPrintDocument.ImageQuality">
            <summary>
            Gets or sets Jpeg image quality
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfPrintDocument.GrayToBWCutoff">
            <summary>
            Gray to BW cutoff level
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfPrintDocument.Document">
            <summary>
            Current PDF document
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfPrintDocument.#ctor(PdfFileWriter.PdfDocument)">
            <summary>
            PDF print document constructor
            </summary>
            <param name="Document">Current PDF document</param>
        </member>
        <member name="P:PdfFileWriter.PdfPrintDocument.DocumentInColor">
            <summary>
            Gets or sets DocumentInColor flag.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfPrintDocument.GetMargins">
            <summary>
            Gets margins in 100th of an inch
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfPrintDocument.SetMargins(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets margins in user units.
            </summary>
            <param name="LeftMargin">Left margin</param>
            <param name="TopMargin">Top margin</param>
            <param name="RightMargin">Right margin</param>
            <param name="BottomMargin">Bottom margin</param>
        </member>
        <member name="M:PdfFileWriter.PdfPrintDocument.AddPagesToPdfDocument">
            <summary>
            Add pages to PDF document
            </summary>
            <remarks>
            The PrintDoc.Print method will call BeginPrint method,
            next it will call multiple times PrintPage method and finally
            it will call EndPrint method. 
            </remarks>
        </member>
        <member name="T:PdfFileWriter.ErrorCorrection">
            <summary>
            QR Code error correction code enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrection.L">
            <summary>
            Low (01)
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrection.M">
            <summary>
            Medium (00)
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrection.Q">
            <summary>
            Medium-high (11)
            </summary>
        </member>
        <member name="F:PdfFileWriter.ErrorCorrection.H">
            <summary>
            High (10)
            </summary>
        </member>
        <member name="T:PdfFileWriter.EncodingMode">
            <summary>
            QR Code encoding modes
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncodingMode.Terminator">
            <summary>
            Terminator
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncodingMode.Numeric">
            <summary>
            Numeric
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncodingMode.AlphaNumeric">
            <summary>
            Alpha numeric
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncodingMode.Append">
            <summary>
            Append
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncodingMode.Byte">
            <summary>
            byte encoding
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncodingMode.FNC1First">
            <summary>
            FNC1 first
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncodingMode.Unknown6">
            <summary>
            Unknown encoding constant
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncodingMode.ECI">
            <summary>
            ECI Assignment Value
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncodingMode.Kanji">
            <summary>
            Kanji encoding (not implemented by this software)
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncodingMode.FNC1Second">
            <summary>
            FNC1 second
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncodingMode.Unknown10">
            <summary>
            Unknown encoding constant
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncodingMode.Unknown11">
            <summary>
            Unknown encoding constant
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncodingMode.Unknown12">
            <summary>
            Unknown encoding constant
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncodingMode.Unknown13">
            <summary>
            Unknown encoding constant
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncodingMode.Unknown14">
            <summary>
            Unknown encoding constant
            </summary>
        </member>
        <member name="F:PdfFileWriter.EncodingMode.Unknown15">
            <summary>
            Unknown encoding constant
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfQREncoder">
            <summary>
            QR Code Encoder class
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfQREncoder.QRCodeMatrix">
            <summary>
            QR code matrix.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfQREncoder.QRCodeVersion">
            <summary>
            Gets QR Code matrix version
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfQREncoder.QRCodeDimension">
            <summary>
            Gets QR Code matrix dimension in bits
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfQREncoder.QRCodeImageDimension">
            <summary>
            Gets QR Code image dimension
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfQREncoder.ErrorCorrection">
            <summary>
            QR Code error correction code (L, M, Q, H)
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfQREncoder.ModuleSize">
            <summary>
            Module size (Default: 2)
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfQREncoder.QuietZone">
            <summary>
            Quiet zone around the barcode in pixels (Default: 8)
            Must be at least 4 times module size
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfQREncoder.ECIAssignValue">
            <summary>
            ECI Assignment Value
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfQREncoder.Encode(System.String)">
            <summary>
            Encode one string into QRCode boolean matrix
            </summary>
            <param name="StringDataSegment">string data segment</param>
        </member>
        <member name="M:PdfFileWriter.PdfQREncoder.Encode(System.String[])">
            <summary>
            Encode array of strings into QRCode boolean matrix
            </summary>
            <param name="StringDataSegments">string data segments</param>
        </member>
        <member name="M:PdfFileWriter.PdfQREncoder.Encode(System.Byte[])">
            <summary>
            Encode one data segment into QRCode boolean matrix
            </summary>
            <param name="SingleDataSeg">Data segment byte array</param>
            <returns>QR Code boolean matrix</returns>
        </member>
        <member name="M:PdfFileWriter.PdfQREncoder.Encode(System.Byte[][])">
            <summary>
            Encode data segments array into QRCode boolean matrix
            </summary>
            <param name="DataSegArray">Data array of byte arrays</param>
            <returns>QR Code boolean matrix</returns>
        </member>
        <member name="M:PdfFileWriter.PdfQREncoder.ConvertQRCodeMatrixToPixels">
            <summary>
            convert black and white matrix to black and white image
            </summary>
            <returns>Black and white image in pixels</returns>
        </member>
        <member name="T:PdfFileWriter.PdfQREncoderTables">
            <summary>
            Static tables for QR Encoder
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfRadialShading">
            <summary>
            PDF radial shading resource class
            </summary>
            <remarks>
            Derived class from PdfObject
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfRadialShading.BBox">
            <summary>
            Bounding box
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfRadialShading.#ctor(PdfFileWriter.PdfDocument,PdfFileWriter.PdfShadingFunction)">
            <summary>
            PDF radial shading constructor.
            </summary>
            <param name="Document">Parent PDF document object</param>
            <param name="ShadingFunction">Shading function</param>
        </member>
        <member name="M:PdfFileWriter.PdfRadialShading.SetGradientDirection(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,PdfFileWriter.MappingMode)">
            <summary>
            Set gradient direction
            </summary>
            <param name="StartCenterX">Start circle center x position</param>
            <param name="StartCenterY">Start circle center y position</param>
            <param name="StartRadius">Start circle center radius</param>
            <param name="EndCenterX">End circle center x position</param>
            <param name="EndCenterY">End circle center y position</param>
            <param name="EndRadius">End circle center radius</param>
            <param name="Mapping">Mapping mode (relative absolute)</param>
        </member>
        <member name="M:PdfFileWriter.PdfRadialShading.AntiAlias(System.Boolean)">
            <summary>
            Sets anti-alias parameter
            </summary>
            <param name="Value">Anti-alias true or false</param>
        </member>
        <member name="M:PdfFileWriter.PdfRadialShading.ExtendShading(System.Boolean,System.Boolean)">
            <summary>
            Extend shading beyond axis
            </summary>
            <param name="Before">Before (true or false)</param>
            <param name="After">After (true or false)</param>
        </member>
        <member name="T:PdfFileWriter.PdfRectangle">
            <summary>
            PDF rectangle in double precision class
            </summary>
            <remarks>
            Note: Microsoft rectangle is left, top, width and height.
            PDF rectangle is left, bottom, right and top.
            PDF numeric precision is double and Microsoft is Single.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfRectangle.Left">
            <summary>
            Gets or sets Left side.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfRectangle.Bottom">
            <summary>
            Gets or sets bottom side.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfRectangle.Right">
            <summary>
            Gets or sets right side.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfRectangle.Top">
            <summary>
            Gets or sets top side.
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfRectangle.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfRectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="Left">Left side</param>
            <param name="Bottom">Bottom side</param>
            <param name="Right">Right side</param>
            <param name="Top">Top side</param>
        </member>
        <member name="M:PdfFileWriter.PdfRectangle.#ctor(PdfFileWriter.PdfRectangle)">
            <summary>
            Copy constructor
            </summary>
            <param name="Rect">Source rectangle</param>
        </member>
        <member name="M:PdfFileWriter.PdfRectangle.#ctor(System.Double)">
            <summary>
            Constructor for margin
            </summary>
            <param name="AllTheSame">Single value for all sides</param>
        </member>
        <member name="M:PdfFileWriter.PdfRectangle.#ctor(System.Double,System.Double)">
            <summary>
            Constructor for margin
            </summary>
            <param name="Hor">Left and right value</param>
            <param name="Vert">Top and bottom value</param>
        </member>
        <member name="P:PdfFileWriter.PdfRectangle.Width">
            <summary>
            Gets width
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfRectangle.Height">
            <summary>
            Gets height
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfRectangle.Move(System.Double,System.Double)">
            <summary>
            Move rectangle
            </summary>
            <param name="DeltaX">Delta X displacement</param>
            <param name="DeltaY">Delta Y displacement</param>
            <returns>New rectangle</returns>
        </member>
        <member name="M:PdfFileWriter.PdfRectangle.AddMargin(System.Double)">
            <summary>
            Add margin to all sides
            </summary>
            <param name="Margin">Margin</param>
            <returns>Rew rectangle</returns>
        </member>
        <member name="T:PdfFileWriter.PdfShadingFunction">
            <summary>
            PDF shading function class
            </summary>
            <remarks>
            PDF function to convert a number between 0 and 1 into a
            color red green and blue based on the sample color array.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfShadingFunction.#ctor(PdfFileWriter.PdfDocument,System.Drawing.Color[])">
            <summary>
            PDF Shading function constructor
            </summary>
            <param name="Document">Document object parent of this function.</param>
            <param name="ColorArray">Array of colors.</param>
        </member>
        <member name="T:PdfFileWriter.PdfSymbol">
            <summary>
            PdfSymbol class
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfSymbol.#ctor(System.String,System.Drawing.FontStyle,System.Int32)">
            <summary>
            PdfSymbol class constructor
            </summary>
            <param name="FontFamilyName">Font family name</param>
            <param name="Style">Font style</param>
            <param name="CharCode">Character code</param>
        </member>
        <member name="T:PdfFileWriter.PdfTableStart">
            <summary>
            PDF table start event handler delegate
            </summary>
            <param name="Table">Parent object.</param>
            <param name="TableStartPos">Table top's position on the page.</param>
            <remarks>
            The purpose of the table start event handler is to allow custom 
            drawing on the page before the header and the first row are drawn. 
            For example, drawing a title above the table.
            </remarks>
        </member>
        <member name="T:PdfFileWriter.PdfTableEnd">
            <summary>
            PDF table end event handler delegate
            </summary>
            <param name="Table">Parent object.</param>
            <param name="TableEndPos">Table bottom's position on the page.</param>
            <remarks>
            The purpose of the table end event handler is to allow custom 
            drawing on the page after the last row was drawn. 
            For example, drawing comment below the table.
            </remarks>
        </member>
        <member name="T:PdfFileWriter.PdfTableCustomDrawCell">
            <summary>
            PDF table custom draw cell event handler delegate
            </summary>
            <param name="Table">The current table object.</param>
            <param name="Cell">The current's cell object.</param>
            <returns>Action taken (see remarks).</returns>
            <remarks>
            <para>True if the event handler drew the cell.</para>
            <para>False if the event handler did not draw the cell.</para>
            </remarks>
        </member>
        <member name="T:PdfFileWriter.PdfTable">
            <summary>
            PDF data table drawing class
            </summary>
            <remarks>
            <para>
            The main class for drawing a data table within a PDF document.
            </para>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#DataTableSupport">2.12 Data Table Support</a>
            </para>
            <para>
            <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#DrawDataTable">For example of drawing image see 3.13. Draw Book Order Form</a>
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.Active">
            <summary>
            Gets the table is active flag.
            </summary>
            <remarks>
            The active flag is set by the PdfTableInitialization method.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.Cell">
            <summary>
            Gets array of cell items.
            </summary>
            <remarks>
            SetColumnWidth method creates the Cell array. 
            Cell array length is Columns. Each cell controls the drawing of one column.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.CellStyle">
            <summary>
            Creates a cell style object as a copy of the default cell style.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTable.ColumnPosition">
            <summary>
            Gets array of column positions.
            </summary>
            <remarks>
            <para>
            Column position is the centre of a border line or the centre of a grid line. 
            </para>
            <para>
            Position[0] is the left side of the table, and Position[Columns] is the right side of the table.
            </para>
            <para>
            The returned array is a copy of the internal array.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.Columns">
            <summary>
            Gets the number of columns in the table.
            </summary>
            <value>The number of columns in the table.</value>
            <remarks>SetColumnWidth method sets this value.</remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.ColumnWidth">
            <summary>
            Gets array of column widths.
            </summary>
            <remarks>
            <para>
            Column width is from the center of border line or a grid line
            to the center of the next border line or grid line. 
            </para>
            <para>
            The returned array is a copy of the internal array.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.CommitToPdfFile">
            <summary>
            Commit page contents to PDF file
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTable.CommitGCCollectFreq">
            <summary>
            Call GC collect frequency
            </summary>
            <remarks>If zero or negative GC will not be called.</remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.Contents">
            <summary>
            Gets the current PDF contents object.
            </summary>
            <value>The current PDF contents object.</value>
            <remarks>
            The initial value is set by the constructor. 
            The value is updated as each new page is added.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.DefaultCellStyle">
            <summary>
            Gets the default cell style.
            </summary>
            <value>Default cell style.</value>
            <remarks>
            <para>
            The default cell style is used by cells without private style.
            </para>
            <para>
            The returned value is the default cell style object.
            A change to any of the syle properties will affect all cells
            without private style.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.DefaultHeaderStyle">
            <summary>
            Gets the default header style.
            </summary>
            <value>Default header style.</value>
            <remarks>
            <para>
            The default header style is used by headers without private style.
            </para>
            <para>
            The returned value is the default header style object.
            A change to any of the syle properties will affect all headers
            without private style.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.Document">
            <summary>
            Gets the PDF document that owns this table.
            </summary>
            <valuw>PDF document the parent of this table.</valuw>
        </member>
        <member name="P:PdfFileWriter.PdfTable.Header">
            <summary>
            Gets array of header items.
            </summary>
            <remarks>
            SetColumnWidth method creates Header array. Array length is Columns.
            Each header controls the drawing of one column's header.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.HeaderHeight">
            <summary>
            Gets the current header height.
            </summary>
            <value>Current header height.</value>
            <remarks>
            Header height is calculated once for each page.
            It is the height of the tallest header.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.HeaderOnEachPage">
            <summary>
            Gets or sets the flag controlling the drawing of the header row.
            </summary>
            <remarks>
            If the flag is true (the default), the header is drawn on each page. 
            If the flag is false, the header is drawn one time only at the start of the table.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.HeaderStyle">
            <summary>
            Creates a header style object as a copy of the default header style.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTable.MinRowHeight">
            <summary>
            Gets or sets minimum row height.
            </summary>
            <value>Minimum row height.</value>
        </member>
        <member name="P:PdfFileWriter.PdfTable.MinHeaderHeight">
            <summary>
            Gets or sets minimum row height.
            </summary>
            <value>Minimum header height.</value>
        </member>
        <member name="P:PdfFileWriter.PdfTable.Page">
            <summary>
            Gets the current PDF page object.
            </summary>
            <value>The current PDF page object.</value>
            <remarks>
            The initial value is set by the constructor. 
            The value is updated as each new page is added.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.TablePageNumber">
            <summary>
            Table's page number starting with zero
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTable.RowBottomPosition">
            <summary>
            Gets the current row bottom position.
            </summary>
            <value>Row bottom position.</value>
            <remarks>
            Row bottom position is calculated for each row. It is RowTopPosition plus RowHeight. 
            The calculation is done within DrawRow method before any of the cells is drawn.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.RowHeight">
            <summary>
            Gets the current row height.
            </summary>
            <value>Current row height.</value>
            <remarks>
            Row height is calculated for each row. It is the height of the tallest cell. 
            The calculation is done within DrawRow method before any of the cells is drawn.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.RowNumber">
            <summary>
            Gets the current row number.
            </summary>
            <value>Row number starting with zero.</value>
        </member>
        <member name="P:PdfFileWriter.PdfTable.RowPosition">
            <summary>
            Gets array of row positions.
            </summary>
            <remarks>
            <para>
            Row position is the centre of a border line or the centre of a grid line. 
            </para>
            <para>
            Position[0] is the top side of the table, and Position[Rows] is the bottom side of the table.
            </para>
            <para>
            The returned array is valid after the last row on the page is processed.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.RowTopPosition">
            <summary>
            Gets or sets current row top position.
            </summary>
            <remarks>
            <para>
            Row top position can only be set during initialization.
            It should be set by the caller if on the first page the 
            table does not start at the top of the page.
            </para>
            <para>
            Row top position is calculated for each row. It is the last RowBottomPosition plus GridLineWidth. 
            The calculation is done within DrawRow method before any of the cells is drawn.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.TableArea">
            <summary>
            Gets or sets table area rectangle.
            </summary>
            <remarks>
            <para>
            Table area rectangle can only be set at initialization time. 
            </para>
            <para>
            The default table area is the default paper size less 1 inch margin. 
            </para>
            <para>
            Returned value is a copy of the internal rectangle.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTable.Borders">
            <summary>
            Borders control
            </summary>
        </member>
        <member name="E:PdfFileWriter.PdfTable.CustomDrawCellEvent">
            <summary>
            Sets the custom draw cell and header event handler.
            </summary>
            <remarks>
            The custom draw cell and header event handler is called each time a 
            cell or header is about to be drawn and RaiseCustomDrawCellEvent 
            property of cell style is set to true;
            </remarks>
        </member>
        <member name="E:PdfFileWriter.PdfTable.TableEndEvent">
            <summary>
            Sets the table end event handler.
            </summary>
            <remarks>
            The table end event handler is called at the end of each page and at the end of the table drawing.
            </remarks>
        </member>
        <member name="E:PdfFileWriter.PdfTable.TableStartEvent">
            <summary>
            Sets the table start event handler.
            </summary>
            <remarks>
            The table start event handler is called at the start of the table and at the top each subsequent page.
            <code>
            // example of table start event handler to display
            // heading above the table on each page
            void BookListTableStart
            	(
            	PdfTable	BookList,
            	double		TableStartPos
            	)
            {
            double PosX = 0.5 * (BookList.TableArea.Left + BookList.TableArea.Right);
            double PosY = TableStartPos + TableTitleFont.Descent(16.0) + 0.05;
            BookList.Contents.DrawText(TableTitleFont, 16.0, PosX, PosY,
            	TextJustify.Center, DrawStyle.Normal, Color.Chocolate, "Book List PdfTable Example"); 
            return;
            }
            </code>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTable.#ctor(PdfFileWriter.PdfPage,PdfFileWriter.PdfContents,PdfFileWriter.PdfDrawTextCtrl)">
            <summary>
            PdfTable constructor.
            </summary>
            <param name="Page">Current PdfPage.</param>
            <param name="Contents">Current PdfContents.</param>
            <param name="TextCtrl"></param>
        </member>
        <member name="M:PdfFileWriter.PdfTable.SetColumnWidth(System.Double[])">
            <summary>
            Sets the number of columns, and column's widths.
            </summary>
            <param name="ColumnWidth">Array of column widths.</param>
            <remarks>
            <para>
            The length of the array sets the number of columns.
            </para>
            <para>
            This method builds two PdfTableCell arrays. One array for data cells, and
            the other array for header cells.
            </para>
            <para>
            The actual column widths will be calculated to fit the width of the table. 
            </para>
            <para>
            The calculation is done as follows. First the library calculates the amount
            of net space available after border lines and grid lines width is taken off
            the width of the table as specified in TableArea. Second, the net space is divided
            in proportion to the requested widths.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTable.PdfTableInitialization">
            <summary>
            PdfTable initialization.
            </summary>
            <remarks>
            Normally the system will call this method on first call to DrawRow(). 
            If called by user it must be called after initialization and before 
            the first row is drawn. This method sets the active flag.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTable.DrawRow(System.Boolean)">
            <summary>
            Draw one row.
            </summary>
            <param name="NewPage">Force new page.</param>
            <remarks>
            The DrawRow method must be called for each row in the table.
            Before calling this method all PdfTableCell values for the 
            current row must be set. If the NewPage argument is set to true,
            the software will print the row at the top of a new page.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTable.Close">
            <summary>
            Close table.
            </summary>
            <remarks>
            The Close method must be called after the last row was drawn.
            </remarks>
        </member>
        <member name="T:PdfFileWriter.PdfTableBorderStyle">
            <summary>
            Border line style class
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableBorderStyle.Display">
            <summary>
            Gets display border line flag
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableBorderStyle.Width">
            <summary>
            Gets border line width
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableBorderStyle.Color">
            <summary>
            Gets border line color
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableBorderStyle.HalfWidth">
            <summary>
            Gets border line half width
            </summary>
            <remarks>
            If display flag is false, the returned value is zero
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorderStyle.#ctor">
            <summary>
            PdfTableBorderStyle default constructor
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorderStyle.#ctor(System.Double)">
            <summary>
            PdfTableBorderStyle constructor
            </summary>
            <param name="Width">Border line width</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorderStyle.#ctor(System.Double,System.Drawing.Color)">
            <summary>
            PdfTableBorderStyle constructor
            </summary>
            <param name="Width">Border line width</param>
            <param name="Color">Border line color</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorderStyle.Clear">
            <summary>
            Clear border line style
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorderStyle.Set(System.Double,System.Drawing.Color)">
            <summary>
            Set border line
            </summary>
            <param name="Width">Line width in user units</param>
            <param name="Color">Line color</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorderStyle.Copy(PdfFileWriter.PdfTableBorderStyle)">
            <summary>
            Copy border line style
            </summary>
            <param name="Other">Border line template</param>
        </member>
        <member name="T:PdfFileWriter.PdfTableBorder">
            <summary>
            Table's borders control
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableBorder.TopBorder">
            <summary>
            Top border line
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.ClearTopBorder">
            <summary>
            Clear top border line
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.SetTopBorder(System.Double)">
            <summary>
            Set top border line
            </summary>
            <param name="Width">Line width</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.SetTopBorder(System.Double,System.Drawing.Color)">
            <summary>
            Set top border line
            </summary>
            <param name="Width">Line width</param>
            <param name="Color">LineColor</param>
        </member>
        <member name="P:PdfFileWriter.PdfTableBorder.BottomBorder">
            <summary>
            Bottom border line
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.ClearBottomBorder">
            <summary>
            Clear bottom border line
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.SetBottomBorder(System.Double)">
            <summary>
            Set bottom border line
            </summary>
            <param name="Width">Line width</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.SetBottomBorder(System.Double,System.Drawing.Color)">
            <summary>
            Set bottom border line
            </summary>
            <param name="Width">Line width</param>
            <param name="Color">LineColor</param>
        </member>
        <member name="P:PdfFileWriter.PdfTableBorder.HeaderHorBorder">
            <summary>
            Header horizontal border
            </summary>
            <remarks>
            Border between headers and first row of cells.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.ClearHeaderHorBorder">
            <summary>
            Clear header horizontal border line
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.SetHeaderHorBorder(System.Double)">
            <summary>
            Set header horizontal border line
            </summary>
            <param name="Width">Line width</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.SetHeaderHorBorder(System.Double,System.Drawing.Color)">
            <summary>
            Set header horizontal border line
            </summary>
            <param name="Width">Line width</param>
            <param name="Color">LineColor</param>
        </member>
        <member name="P:PdfFileWriter.PdfTableBorder.CellHorBorder">
            <summary>
            Cell horizontal border line
            </summary>
            <remarks>
            One border style for all horizontal borders between rows of cells.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.ClearCellHorBorder">
            <summary>
            Clear cell horizontal border line
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.SetCellHorBorder(System.Double)">
            <summary>
            Set cell horizontal border line
            </summary>
            <param name="Width">Line width</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.SetCellHorBorder(System.Double,System.Drawing.Color)">
            <summary>
            Set cell horizontal border line
            </summary>
            <param name="Width">Line width</param>
            <param name="Color">LineColor</param>
        </member>
        <member name="P:PdfFileWriter.PdfTableBorder.HeaderVertBorder">
            <summary>
            Array of vertical borders between headers
            </summary>
            <remarks>
            Array of vertical borders between all headers.
            Array's size is Columns + 1.
            Array's item [0] is left border.
            Array's item [Coloumns] is right border.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.ClearHeaderVertBorder(System.Int32)">
            <summary>
            Clear header vertical border line
            </summary>
            <param name="Index">Border line index</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.SetHeaderVertBorder(System.Int32,System.Double)">
            <summary>
            Set header vertical border line
            </summary>
            <param name="Index">Border line index</param>
            <param name="Width">Line width</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.SetHeaderVertBorder(System.Int32,System.Double,System.Drawing.Color)">
            <summary>
            Set header horizontal border line
            </summary>
            <param name="Index">Border line index</param>
            <param name="Width">Line width</param>
            <param name="Color">LineColor</param>
        </member>
        <member name="P:PdfFileWriter.PdfTableBorder.HeaderVertBorderActive">
            <summary>
            At least one header vertical border is active
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableBorder.CellVertBorder">
            <summary>
            Array of vertical borders between cells
            </summary>
            <remarks>
            Array of vertical borders between all cells.
            Array's size is Columns + 1.
            Array's item [0] is left border.
            Array's item [Coloumns] is right border.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.ClearCellVertBorder(System.Int32)">
            <summary>
            Clear cell vertical border line
            </summary>
            <param name="Index">Border line index</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.SetCellVertBorder(System.Int32,System.Double)">
            <summary>
            Set cell vertical border line
            </summary>
            <param name="Index">Border line index</param>
            <param name="Width">Line width</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.SetCellVertBorder(System.Int32,System.Double,System.Drawing.Color)">
            <summary>
            Set cell horizontal border line
            </summary>
            <param name="Index">Border line index</param>
            <param name="Width">Line width</param>
            <param name="Color">LineColor</param>
        </member>
        <member name="P:PdfFileWriter.PdfTableBorder.CellVertBorderActive">
            <summary>
            At least one cell vertical border is active
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.ClearAllBorders">
            <summary>
            Clear all borders
            </summary>
            <remarks>
            The table will be displayed with no borders or gris lines.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.SetDefaultBorders">
            <summary>
            Set all borders to default values.
            </summary>
            <remarks>
            All borders will be black.
            Frame line width is set to one point.
            Grids line width are set to 0.2 of one point
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.SetAllBorders(System.Double)">
            <summary>
            Set all borders to the same line width
            </summary>
            <param name="Width">Border line width</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.SetAllBorders(System.Double,System.Drawing.Color)">
            <summary>
            Set all borders to the same line width and color
            </summary>
            <param name="Width">Border line width</param>
            <param name="Color">Border line color</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.SetAllBorders(System.Double,System.Double)">
            <summary>
            Set all borders
            </summary>
            <param name="FrameWidth">Frame border line width</param>
            <param name="GridWidth">Grid borders line width</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.SetAllBorders(System.Double,System.Drawing.Color,System.Double,System.Drawing.Color)">
            <summary>
            Set all borders
            </summary>
            <param name="FrameWidth">Frame border line width</param>
            <param name="FrameColor">Frame border color</param>
            <param name="GridWidth">Grid borders line width</param>
            <param name="GridColor">Grid line color</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.SetFrame(System.Double)">
            <summary>
            Set frame border lines
            </summary>
            <param name="FrameWidth">Frame line width</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableBorder.SetFrame(System.Double,System.Drawing.Color)">
            <summary>
            Set frame border lines
            </summary>
            <param name="FrameWidth">Frame line width</param>
            <param name="FrameColor">Frame line color</param>
        </member>
        <member name="T:PdfFileWriter.CellType">
            <summary>
            Cell type enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.CellType.Empty">
            <summary>
            Cell's value is null.
            </summary>
        </member>
        <member name="F:PdfFileWriter.CellType.Text">
            <summary>
            Cell's value is String and Style.MultiLineText is false.
            </summary>
        </member>
        <member name="F:PdfFileWriter.CellType.TextBox">
            <summary>
            Cell's value is TextBox or String with Style.MultiLineText is true.
            </summary>
        </member>
        <member name="F:PdfFileWriter.CellType.Image">
            <summary>
            Cell's value is image.
            </summary>
        </member>
        <member name="F:PdfFileWriter.CellType.Barcode">
            <summary>
            Cell's value is barcode.
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfTableCell">
            <summary>
            PDF table cell class
            </summary>
            <remarks>
            <para>
            The PDF table cell class represent one cell in the table.
            </para>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#DataTableSupport">2.12 Data Table Support</a>
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.Index">
            <summary>
            Gets cell's index position within Table.Cell array.
            </summary>
            <remarks>
            It is the cell's column number starting with zero.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.Header">
            <summary>
            Cell is a header.
            </summary>
            <remarks>
            If this property is true, the PdfTableCell is a header otherwise it is a cell.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.Style">
            <summary>
            Gets or sets cell's style.
            </summary>
            <remarks>
            <para>
            If Style was not set by the caller, this value is the default cell style.
            Any change to the properties will affect all cells without cell style.
            </para>
            <para>
            If Style was set by the caller to a private style, this value is the private cell style.
            Any change to the properties will affect all other cells sharing this private cell style.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.Type">
            <summary>
            Gets cell's enumeration type.
            </summary>
            <remarks>
            <para>
            CellType will be Text for String and MultiLineText set to false plus all basic numeric values.
            </para>
            <para>
            CallType will be TextBox for String and MultiLineText set to true or Value set to TextBox.
            </para>
            <para>
            CallType will be set ti Image or Barcode if Value is set accordingly.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.Value">
            <summary>
            Gets or sets cell's value
            </summary>
            <remarks>
            <para>
            Value can be set to String, basic numeric values, bool, Char, TextBox, PdfImage or Barcode.
            </para>
            <para>
            If value is set to String and MultiLineText is set to true, 
            the String will be converted to TextBox.
            </para>
            <para>
            All basic numeric values will be converted to String.
            </para>
            <para>
            Value will be reset to null after each row drawing.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.FormattedText">
            <summary>
            Gets cell's formatted value.
            </summary>
            <remarks>
            If Value is a numeric type, it is converted to formatted text
            using Value.ToString(Format, NumberFormat) method.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.TextBox">
            <summary>
            Gets TextBox if Type is TextBox.
            </summary>
            <remarks>
            TextBox will be set if Value is a String and Style.MultiLine is true,
            or Value is a TextBox.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.TextBoxHeight">
            <summary>
            Text box height including extra space
            </summary>
            <remarks>
            TextBoxHeight Value is calculated within DrawRow method. 
            It is valid for CustomDrawCellEvent.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.Image">
            <summary>
            Gets Image if Type is Image.
            </summary>
            <seealso cref="P:PdfFileWriter.PdfTableCell.ImageWidth"/>
            <seealso cref="P:PdfFileWriter.PdfTableCell.ImageHeight"/>
            <remarks>
            <para>
            If ImageWidth and ImageHeight were not set by the user,
            the image width will be set to ClientWidth and the height
            will be calculated to preserve image's aspect ratio.
            </para>
            <para>
            If ImageWidth was not set by the user and ImageHeight
            was set by the user. ImageWidth will be calculated to 
            preserve image's aspect ratio.
            </para>
            <para>
            If ImageWidth was set by the user and ImageHeight was
            not set by the user, ImageHeight will be calculated to 
            preserve image's aspect ratio.
            </para>
            <para>
            If both ImageWidth and ImageHeight were set by the user,
            the aspect ratio of the image will be ignored.
            </para>
            <para>
            If ImageWidth is wider than Client width, both ImageWidth
            and ImageHeight will be adjusted to fit the available width.
            </para>
            <para>
            ImageWidth and ImageHeight will be reset to zero after each row drawing.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.ImageWidth">
            <summary>
            Gets or sets image width in user units.
            </summary>
            <seealso cref="P:PdfFileWriter.PdfTableCell.Image"/>
            <remarks>
            Please note "Remarks" in Image property for description
            of ImageWidth and ImageHeight.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.ImageHeight">
            <summary>
            Gets or sets image height in user units.
            </summary>
            <seealso cref="P:PdfFileWriter.PdfTableCell.Image"/>
            <remarks>
            Please note "Remarks" in Image property for description
            of ImageWidth and ImageHeight.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.Barcode">
            <summary>
            Gets barcode if type is Barcode
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.WebLink">
            <summary>
            Sets a web link for this cell.
            </summary>
            <remarks>
            <para>
            The web link string is converted to AnnotAction object.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.Annotation">
            <summary>
            Gets or sets annotation action derived classes
            </summary>
            <remarks>
            <para>The user can activate the annotation action by clicking anywhere in the cell area.
            Right click for attached file.</para>
            <list type="table">
            <item><description>Weblink action to activate web browser.</description></item>
            <item><description>Go to action to jump to another page in the document.</description></item>
            <item><description>Display media action to isplay video or play sound.</description></item>
            <item><description>File attachment to save or view embedded file.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.FrameLeft">
            <summary>
            Gets cell's frame left side (grid line).
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.FrameWidth">
            <summary>
            Gets cell's frame width (grid line to grid line).
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.ClientLeft">
            <summary>
            Gets client area left side.
            </summary>
            <remarks>
            ClientLeft is FrameLeft + Margin.Left.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.ClientBottom">
            <summary>
            Gets client area bottom side.
            </summary>
            <remarks>
            ClientBottom is Table.RowBottomPosition + Margin.Bottom
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.ClientRight">
            <summary>
            Gets client area right side.
            </summary>
            <remarks>
            ClientRight is FrameLeft + FrameWidth - Margin.Right.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.ClientTop">
            <summary>
            Gets client area top side.
            </summary>
            <remarks>
            ClientTop is Table.RowTopPosition - Margin.Top.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.ClientWidth">
            <summary>
            Gets Client area width.
            </summary>
            <remarks>
            <para>
            ClientWidth is FrameWidth - Margin.Left - Margin.Right.
            </para>
            <para>
            Calling client width before initialization will force initialization.
            Table.PdfTableInitialization() method will be called.
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableCell.Parent">
            <summary>
            Gets parent PdfTable.
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfTableCell.CreateTextBox">
            <summary>
            Creates an empty text box with client width.
            </summary>
            <returns>Empty text box with client width.</returns>
            <remarks>
            <para>
            The newly created TextBox will have the correct client width.
            First line indent and line break factor will be taken from cell's style.
            </para>
            <para>
            CreateTextBox() method sets the Value property of this cell
            to the returned TextBox value;
            </para>
            </remarks>
        </member>
        <member name="T:PdfFileWriter.PdfTableStyle">
            <summary>
            PDF table cell or header style class
            </summary>
            <remarks>
            <para>
            For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#DataTableSupport">2.12 Data Table Support</a>
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.Alignment">
            <summary>
            Gets or sets content alignment.
            </summary>
            <remarks>
            Alignment property align the content within the client area of the cell.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.BackgroundColor">
            <summary>
            Gets or sets background color.
            </summary>
            <remarks>
            If background color is not empty, the frame area of the cell will 
            be painted by this color. Default is Color.Empty.
            </remarks>
        </member>
        <member name="F:PdfFileWriter.PdfTableStyle.BarcodeCtrl">
            <summary>
            Draw barcode control
            </summary>
            <remarks>
            Contains the width of the bar code narrow bar.
            and the height of the barcode
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.TextBoxFirstLineIndent">
            <summary>
            Gets or sets first line indent for text box items.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.TextBoxLineBreakFactor">
            <summary>
            Gets or sets text box line break factor.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.TextBoxLineExtraSpace">
            <summary>
            Gets or sets extra line spacing for text box items.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.TextBoxPageBreakLines">
            <summary>
            Gets or sets minimum text lines for page break calculations.
            </summary>
            <remarks>
            If TextBoxPageBreakLines is zero, the software will keep
            all of the TextBox together. If the TextBox height is too
            big to fit in the table, an exception will be raised. If
            TextBoxPageBreakLines is not zero and TextBox height is too
            big, the height of TextBoxPageBreakLines will be used
            to start a new page. The remaining lines will be printed
            on the next page or pages.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.TextBoxParagraphExtraSpace">
            <summary>
            Gets or sets extra paragraph spacing for text box items.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.TextBoxTextJustify">
            <summary>
            Gets or sets text justify within text box.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.Format">
            <summary>
            Gets or sets format string.
            </summary>
            <remarks>
            <para>
            All basic numeric values are converted to string using: 
            </para>
            <code>
            Value.ToString(Format, NumberFormatInfo);
            </code>
            <para>
            The NumberFormatInfo allows for regional formatting.
            </para>
            <para>
            Both Format and NumberFormatInfo are set to null by default.
            In other words by default the conversion is:
            </para>
            <code>
            Value.ToString();
            </code>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.Margin">
            <summary>
            Gets or sets cell's margins.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.RaiseCustomDrawCellEvent">
            <summary>
            Gets or sets raise custom draw cell event flag.
            </summary>
            <remarks>
            With this flag you can control which columns call the draw cell event handler.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.MinHeight">
            <summary>
            Gets or sets minimum cell height.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.MultiLineText">
            <summary>
            Gets or sets multi-line text flag.
            </summary>
            <remarks>
            String value will be converted to text box value.
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTableStyle.NumberFormatInfo">
            <summary>
            Gets or sets number format information.
            </summary>
            <remarks>
            <para>
            All basic numeric values are converted to string using: 
            </para>
            <code>
            Value.ToString(Format, NumberFormatInfo);
            </code>
            <para>
            The NumberFormatInfo allows for regional formatting.
            </para>
            <para>
            Both Format and NumberFormatInfo are set to null by default.
            In other words by default the conversion is:
            </para>
            <code>
            Value.ToString();
            </code>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTableStyle.#ctor(PdfFileWriter.PdfDrawTextCtrl)">
            <summary>
            PDF table style default constructor.
            </summary>
            <param name="TextCtrl">Font</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableStyle.#ctor(PdfFileWriter.PdfTable)">
            <summary>
            PDF table style constructor based on table's default cell style.
            </summary>
            <param name="Table">Table</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableStyle.#ctor(PdfFileWriter.PdfTableStyle)">
            <summary>
            PDF table style constructor as a copy of another style.
            </summary>
            <param name="Other">Copy constructor.</param>
        </member>
        <member name="M:PdfFileWriter.PdfTableStyle.Copy(PdfFileWriter.PdfTableStyle)">
            <summary>
            Copy one style to another 
            </summary>
            <param name="Other">Source style</param>
        </member>
        <member name="T:PdfFileWriter.PdfTextBox">
            <summary>
            TextBox class
            </summary>
            <remarks>
            <para>
            <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#DrawTextBox">For example of drawing TextBox see 3.12. Draw Text Box</a>
            </para>
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTextBox.BoxWidth">
            <summary>
            Gets box width.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTextBox.BoxHeight">
            <summary>
            Gets box height.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTextBox.LineCount">
            <summary>
            Gets line count.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTextBox.ParagraphCount">
            <summary>
            Gets paragraph count.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTextBox.FirstLineIndent">
            <summary>
            Gets first line is indented.
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfTextBox.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            TextBox constructor
            </summary>
            <param name="BoxWidth">Box width.</param>
            <param name="FirstLineIndent">First line is indented.</param>
            <param name="LineBreakFactor">Line break factor.</param>
        </member>
        <member name="M:PdfFileWriter.PdfTextBox.Clear">
            <summary>
            Clear TextBox
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTextBox.Item(System.Int32)">
            <summary>
            Access TextBoxLine array.
            </summary>
            <param name="Index">Index</param>
            <returns>TextBoxLine</returns>
        </member>
        <member name="M:PdfFileWriter.PdfTextBox.BoxHeightExtra(System.Double,System.Double)">
            <summary>
            TextBox height including extra line and paragraph space.
            </summary>
            <param name="LineExtraSpace">Extra line space.</param>
            <param name="ParagraphExtraSpace">Extra paragraph space.</param>
            <returns>Height</returns>
        </member>
        <member name="M:PdfFileWriter.PdfTextBox.BoxHeightExtra(System.Int32,System.Double,System.Double)">
            <summary>
            Thwe height of the first LineCount lines including extra line and paragraph space.
            </summary>
            <param name="LineCount">The requested number of lines.</param>
            <param name="LineExtraSpace">Extra line space.</param>
            <param name="ParagraphExtraSpace">Extra paragraph space.</param>
            <returns>Height</returns>
        </member>
        <member name="M:PdfFileWriter.PdfTextBox.BoxHeightExtra(System.Int32@,System.Int32@,System.Double,System.Double,System.Double)">
            <summary>
            The height of a block of lines within TextBox not excedding request height.
            </summary>
            <param name="LineStart">Start line</param>
            <param name="LineEnd">End line</param>
            <param name="RequestHeight">Requested height</param>
            <param name="LineExtraSpace">Extra line space.</param>
            <param name="ParagraphExtraSpace">Extra paragraph space.</param>
            <returns>Height</returns>
            <remarks>
            LineStart will be adjusted forward to skip blank lines. LineEnd 
            will be one after a non blank line. 
            </remarks>
        </member>
        <member name="P:PdfFileWriter.PdfTextBox.LongestLineWidth">
            <summary>
            Longest line width
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfTextBox.Terminate">
            <summary>
            Terminate TextBox
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfTextBox.AddText(PdfFileWriter.PdfDrawTextCtrl,System.String)">
            <summary>
            Add text to text box.
            </summary>
            <param name="TextCtrl">PDF draw text control</param>
            <param name="Text">Text</param>
        </member>
        <member name="T:PdfFileWriter.PdfTextBoxLine">
            <summary>
            TextBoxLine class
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTextBoxLine.Ascent">
            <summary>
            Gets line ascent.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTextBoxLine.Descent">
            <summary>
            Gets line descent.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTextBoxLine.EndOfParagraph">
            <summary>
            Line is end of paragraph.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTextBoxLine.SegArray">
            <summary>
            Gets array of line segments.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTextBoxLine.LineHeight">
            <summary>
            Gets line height.
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfTextBoxLine.#ctor(System.Double,System.Double,System.Boolean,PdfFileWriter.PdfTextBoxSeg[])">
            <summary>
            TextBoxLine constructor.
            </summary>
            <param name="Ascent">Line ascent.</param>
            <param name="Descent">Line descent.</param>
            <param name="EndOfParagraph">Line is end of paragraph.</param>
            <param name="SegArray">Segments' array.</param>
        </member>
        <member name="T:PdfFileWriter.PdfTextBoxSeg">
            <summary>
            TextBox line segment class
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTextBoxSeg.SegWidth">
            <summary>
            Gets segment width.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTextBoxSeg.SpaceCount">
            <summary>
            Gets segment space character count.
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfTextBoxSeg.Text">
            <summary>
            Gets segment text.
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfTextBoxSeg.#ctor(PdfFileWriter.PdfDrawTextCtrl)">
            <summary>
            Text box segment constructor.
            </summary>
            <param name="TextCtrl">Segment text control.</param>
        </member>
        <member name="M:PdfFileWriter.PdfTextBoxSeg.#ctor(PdfFileWriter.PdfTextBoxSeg)">
            <summary>
            Text box segment copy constructor.
            </summary>
            <param name="Other">Segment text control.</param>
        </member>
        <member name="T:PdfFileWriter.TilingType">
            <summary>
            PDF tiling type enumeration
            </summary>
        </member>
        <member name="F:PdfFileWriter.TilingType.Constant">
            <summary>
            Constant
            </summary>
        </member>
        <member name="F:PdfFileWriter.TilingType.NoDistortion">
            <summary>
            No distortion
            </summary>
        </member>
        <member name="F:PdfFileWriter.TilingType.ConstantAndFast">
            <summary>
            Constant and fast
            </summary>
        </member>
        <member name="T:PdfFileWriter.PdfTilingPattern">
            <summary>
            PDF tiling pattern resource class
            </summary>
            <remarks>
            <para>
            <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#TilingPattern">For example of using tiling pattern see 3.3. Tiling Pattern</a>
            </para>
            <para>
            <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#TilingPattern2">or 3.8. Draw Rectangle with Rounded Corners and Filled with Brick Pattern</a>
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.#ctor(PdfFileWriter.PdfDocument)">
            <summary>
            PDF Tiling pattern constructor.
            </summary>
            <param name="Document">Document object parent of the object.</param>
            <remarks>
            This program support only color tiling pattern: PaintType = 1.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.SetTilingType(PdfFileWriter.TilingType)">
            <summary>
            Set tiling type
            </summary>
            <param name="TilingType">Tiling type</param>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.SetTileBox(System.Double)">
            <summary>
            Set tile box
            </summary>
            <param name="Side">Length of one side.</param>
            <remarks>
            Set square bounding box and equal step
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.SetTileBox(System.Double,System.Double)">
            <summary>
            Set tile box
            </summary>
            <param name="Width">Box width.</param>
            <param name="Height">Box height.</param>
            <remarks>
            Set rectangle bounding box and equal step.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.SetTileBox(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set bounding box and step 
            </summary>
            <param name="Width">Box width.</param>
            <param name="Height">Box height.</param>
            <param name="StepX">Horizontal step</param>
            <param name="StepY">Vertical step</param>
            <remarks>
            Set rectangle bounding box and independent step size.
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.SetScale(System.Double)">
            <summary>
            Set scale
            </summary>
            <param name="Scale">Scale factor.</param>
            <remarks>
            Warning: the program replaces the transformation matrix
            with a new one [Scale 0 0 Scale 0 0].
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.SetScale(System.Double,System.Double)">
            <summary>
            Set scale
            </summary>
            <param name="ScaleX">Horizontal scale factor.</param>
            <param name="ScaleY">Vertical scale factor.</param>
            <remarks>
            Warning: the program replaces the transformation matrix
            with a new one [ScaleX 0 0 ScaleY 0 0].
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.SetScaleAndOrigin(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set scale and origin
            </summary>
            <param name="OriginX">Origin X</param>
            <param name="OriginY">Origin Y</param>
            <param name="ScaleX">Scale X</param>
            <param name="ScaleY">Scale Y</param>
            <remarks>
            Warning: the program replaces the transformation matrix
            with a new one [ScaleX 0 0 ScaleY OriginX OriginY].
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.SetPatternMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set pattern transformation matrix
            </summary>
            <param name="a">A</param>
            <param name="b">B</param>
            <param name="c">C</param>
            <param name="d">D</param>
            <param name="e">E</param>
            <param name="f">F</param>
            <remarks>
            Xpage = a * Xuser + c * Yuser + e
            Ypage = b * Xuser + d * Yuser + f
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.SetBrickPattern(PdfFileWriter.PdfDocument,System.Double,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Create new PdfTilingPattern class with brick pattern.
            </summary>
            <param name="Document">Current document object.</param>
            <param name="Scale">Scale factor.</param>
            <param name="BorderColor">Stroking color.</param>
            <param name="FillColor">Non-stroking color.</param>
            <returns>PDF tiling pattern</returns>
            <remarks>
            <para>
            The pattern is a square with one user unit side.
            </para>
            <para>
            The bottom half is one brick. The top half is two half bricks.
            </para>
            <para>
            Arguments:
            </para>
            <para>
            Scale the pattern to your requirements.
            </para>
            <para>
            Stroking color is the mortar color.
            </para>
            <para>
            Nonstroking color is the brick color.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfTilingPattern.SetWeavePattern(PdfFileWriter.PdfDocument,System.Double,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Create new PdfTilingPattern class with weave pattern.
            </summary>
            <param name="Document">Current PDF document.</param>
            <param name="Scale">Scale factor</param>
            <param name="Background">Background color.</param>
            <param name="Horizontal">Horizontal line color.</param>
            <param name="Vertical">Vertical line color.</param>
            <returns>PDF tiling pattern</returns>
            <remarks>
            <para>
            The pattern in a square with one user unit side.
            </para>
            <para>
            It is made of horizontal and vertical rectangles.
            </para>
            </remarks>
        </member>
        <member name="T:PdfFileWriter.PdfTypeOneFontInfo">
            <summary>
            Type one font information class
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfTypeOneFontInfo.FontName">
            <summary>
            Font name
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfTypeOneFontInfo.BBoxLeft">
            <summary>
            Font bounding box left side
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfTypeOneFontInfo.BBoxBottom">
            <summary>
            Font bounding box bottom side
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfTypeOneFontInfo.BBoxRight">
            <summary>
            Font bounding box right side
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfTypeOneFontInfo.BBoxTop">
            <summary>
            Font bounding box top side
            </summary>
        </member>
        <member name="F:PdfFileWriter.PdfTypeOneFontInfo.CharInfo">
            <summary>
            Characters array of information
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfTypeOneFontInfo.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int16[0:,0:])">
            <summary>
            Type one font info constructor
            </summary>
            <param name="FontName">Font name</param>
            <param name="BBoxLeft">Bounding box left</param>
            <param name="BBoxBottom">Bounding box bottom</param>
            <param name="BBoxRight">Bounding box right</param>
            <param name="BBoxTop">Bounding box top</param>
            <param name="CharInfo">Characters information array</param>
        </member>
        <member name="M:PdfFileWriter.PdfTypeOneFontInfo.CharWidth(System.Char)">
            <summary>
            Character width
            </summary>
            <param name="Chr">Character code</param>
            <returns>Character width</returns>
        </member>
        <member name="M:PdfFileWriter.PdfTypeOneFontInfo.CharBBoxLeft(System.Char)">
            <summary>
            Character bounding box left side
            </summary>
            <param name="Chr">Character code</param>
            <returns>Bounding box left</returns>
        </member>
        <member name="M:PdfFileWriter.PdfTypeOneFontInfo.CharBBoxBottom(System.Char)">
            <summary>
            Character bounding box bottom side
            </summary>
            <param name="Chr">Character code</param>
            <returns>Bounding box bottom</returns>
        </member>
        <member name="M:PdfFileWriter.PdfTypeOneFontInfo.CharBBoxRight(System.Char)">
            <summary>
            Character bounding box right side
            </summary>
            <param name="Chr">Character code</param>
            <returns>Bounding box right</returns>
        </member>
        <member name="M:PdfFileWriter.PdfTypeOneFontInfo.CharBBoxTop(System.Char)">
            <summary>
            Character bounding box top side
            </summary>
            <param name="Chr">Character code</param>
            <returns>Bounding box top</returns>
        </member>
        <member name="T:PdfFileWriter.PdfWebLink">
            <summary>
            PDF Weblink class
            </summary>
            <remarks>
            <para>
            The library will make sure that all weblinks in the PDF file are unique.
            To create a weblink class you must use a static menthod. This method will
            create a new object for a new weblink. The mothod will return an 
            existing object if it is a duplicate.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfWebLink.Create(PdfFileWriter.PdfDocument,System.String)">
            <summary>
            Add a weblink
            </summary>
            <param name="Document">PDF document</param>
            <param name="WebLinkStr">Weblink text</param>
            <returns>Weblink object</returns>
            <remarks>
            <para>
            The library will make sure that all weblinks in the PDF file are unique.
            To create a weblink class you must use a static menthod. This method will
            create a new object for a new weblink. The mothod will return an 
            existing object if it is a duplicate.
            </para>
            </remarks>
        </member>
        <member name="M:PdfFileWriter.PdfWebLink.CompareTo(PdfFileWriter.PdfWebLink)">
            <summary>
            Compare two WebLinkStr objects.
            </summary>
            <param name="Other">Other object.</param>
            <returns>Compare result.</returns>
        </member>
        <member name="T:PdfFileWriter.PdfXObject">
            <summary>
            PDF X object resource class
            </summary>
        </member>
        <member name="P:PdfFileWriter.PdfXObject.BBox">
            <summary>
            XObject bounding rectangle
            </summary>
        </member>
        <member name="M:PdfFileWriter.PdfXObject.#ctor(PdfFileWriter.PdfDocument,System.Double,System.Double)">
            <summary>
            PDF X Object constructor
            </summary>
            <param name="Document">PDF document</param>
            <param name="Width">X Object width</param>
            <param name="Height">X Object height</param>
        </member>
        <member name="M:PdfFileWriter.PdfXObject.LayerControl(PdfFileWriter.PdfObject)">
            <summary>
            Layer control
            </summary>
            <param name="Layer">PdfLayer object</param>
        </member>
    </members>
</doc>
